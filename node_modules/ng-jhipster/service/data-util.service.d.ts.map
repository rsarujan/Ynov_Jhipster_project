{"version":3,"file":"data-util.service.d.ts","sources":["data-util.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ElementRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nexport declare type JhiFileLoadErrorType = 'not.image' | 'could.not.extract';\nexport interface JhiFileLoadError {\n    message: string;\n    key: JhiFileLoadErrorType;\n    params?: any;\n}\n/**\n * An utility service for data.\n */\nexport declare class JhiDataUtils {\n    constructor();\n    /**\n     * Method to abbreviate the text given\n     */\n    abbreviate(text: string, append?: string): string;\n    /**\n     * Method to find the byte size of the string provides\n     */\n    byteSize(base64String: string): string;\n    /**\n     * Method to open file\n     */\n    openFile(contentType: string, data: string): void;\n    /**\n     * Method to convert the file to base64\n     */\n    toBase64(file: File, cb: Function): void;\n    /**\n     * Method to clear the input\n     */\n    clearInputImage(entity: any, elementRef: ElementRef, field: string, fieldContentType: string, idInput: string): void;\n    /**\n     * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object\n     * and returns a promise.\n     *\n     * @param event the object containing the file (at event.target.files[0])\n     * @param entity the object to set the file's 'base 64 data' and 'file type' on\n     * @param field the field name to set the file's 'base 64 data' on\n     * @param isImage boolean representing if the file represented by the event is an image\n     * @returns a promise that resolves to the modified entity if operation is successful, otherwise rejects with an error message\n     */\n    setFileData(event: any, entity: any, field: string, isImage: boolean): Promise<any>;\n    /**\n     * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object\n     * and returns an observable.\n     *\n     * @param event the object containing the file (at event.target.files[0])\n     * @param editForm the form group where the input field is located\n     * @param field the field name to set the file's 'base 64 data' on\n     * @param isImage boolean representing if the file represented by the event is an image\n     * @returns an observable that loads file to form field and completes if sussessful\n     *          or returns error as JhiFileLoadError on failure\n     */\n    loadFileToForm(event: Event, editForm: FormGroup, field: string, isImage: boolean): Observable<void>;\n    /**\n     * Method to download file\n     */\n    downloadFile(contentType: string, data: string, fileName: string): void;\n    private endsWith;\n    private paddingSize;\n    private size;\n    private formatAsBytes;\n}\n"]}