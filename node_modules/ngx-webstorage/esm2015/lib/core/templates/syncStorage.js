import { noop } from '../../helpers/noop';
import { StorageKeyManager } from '../../helpers/storageKeyManager';
import { distinctUntilChanged, filter, shareReplay, switchMap } from 'rxjs/operators';
export class SyncStorage {
    constructor(strategy) {
        this.strategy = strategy;
    }
    retrieve(key) {
        let value;
        this.strategy.get(StorageKeyManager.normalize(key)).subscribe((result) => value = typeof result === 'undefined' ? null : result);
        return value;
    }
    store(key, value) {
        this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);
        return value;
    }
    clear(key) {
        if (key !== undefined)
            this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);
        else
            this.strategy.clear().subscribe(noop);
    }
    getStrategyName() { return this.strategy.name; }
    observe(key) {
        key = StorageKeyManager.normalize(key);
        return this.strategy.keyChanges.pipe(filter((changed) => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3luY1N0b3JhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtd2Vic3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL3RlbXBsYXRlcy9zeW5jU3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFeEMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFFbEUsT0FBTyxFQUFDLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEYsTUFBTSxPQUFPLFdBQVc7SUFDdkIsWUFBc0IsUUFBOEI7UUFBOUIsYUFBUSxHQUFSLFFBQVEsQ0FBc0I7SUFDcEQsQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFXO1FBQ25CLElBQUksS0FBVSxDQUFDO1FBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pJLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFXLEVBQUUsS0FBVTtRQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNFLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFZO1FBQ2pCLElBQUksR0FBRyxLQUFLLFNBQVM7WUFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDOztZQUNoRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsZUFBZSxLQUFZLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXZELE9BQU8sQ0FBQyxHQUFXO1FBQ2xCLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ25DLE1BQU0sQ0FBQyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsT0FBTyxLQUFLLElBQUksSUFBSSxPQUFPLEtBQUssR0FBRyxDQUFDLEVBQ2hFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUN2QyxvQkFBb0IsRUFBRSxFQUN0QixXQUFXLEVBQUUsQ0FDYixDQUFDO0lBQ0gsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdG9yYWdlU3RyYXRlZ3l9IGZyb20gJy4uL2ludGVyZmFjZXMvc3RvcmFnZVN0cmF0ZWd5JztcbmltcG9ydCB7bm9vcH0gZnJvbSAnLi4vLi4vaGVscGVycy9ub29wJztcbmltcG9ydCB7U3RvcmFnZVNlcnZpY2V9IGZyb20gJy4uL2ludGVyZmFjZXMvc3RvcmFnZVNlcnZpY2UnO1xuaW1wb3J0IHtTdG9yYWdlS2V5TWFuYWdlcn0gZnJvbSAnLi4vLi4vaGVscGVycy9zdG9yYWdlS2V5TWFuYWdlcic7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZmlsdGVyLCBzaGFyZVJlcGxheSwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjbGFzcyBTeW5jU3RvcmFnZSBpbXBsZW1lbnRzIFN0b3JhZ2VTZXJ2aWNlIHtcblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55Pikge1xuXHR9XG5cblx0cmV0cmlldmUoa2V5OiBzdHJpbmcpOiBhbnkge1xuXHRcdGxldCB2YWx1ZTogYW55O1xuXHRcdHRoaXMuc3RyYXRlZ3kuZ2V0KFN0b3JhZ2VLZXlNYW5hZ2VyLm5vcm1hbGl6ZShrZXkpKS5zdWJzY3JpYmUoKHJlc3VsdCkgPT4gdmFsdWUgPSB0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXN1bHQpO1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdHN0b3JlKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogYW55IHtcblx0XHR0aGlzLnN0cmF0ZWd5LnNldChTdG9yYWdlS2V5TWFuYWdlci5ub3JtYWxpemUoa2V5KSwgdmFsdWUpLnN1YnNjcmliZShub29wKTtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHRjbGVhcihrZXk/OiBzdHJpbmcpOiB2b2lkIHtcblx0XHRpZiAoa2V5ICE9PSB1bmRlZmluZWQpXG5cdFx0XHR0aGlzLnN0cmF0ZWd5LmRlbChTdG9yYWdlS2V5TWFuYWdlci5ub3JtYWxpemUoa2V5KSkuc3Vic2NyaWJlKG5vb3ApO1xuXHRcdGVsc2UgdGhpcy5zdHJhdGVneS5jbGVhcigpLnN1YnNjcmliZShub29wKTtcblx0fVxuXG5cdGdldFN0cmF0ZWd5TmFtZSgpOiBzdHJpbmcge3JldHVybiB0aGlzLnN0cmF0ZWd5Lm5hbWU7IH1cblxuXHRvYnNlcnZlKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcblx0XHRrZXkgPSBTdG9yYWdlS2V5TWFuYWdlci5ub3JtYWxpemUoa2V5KTtcblx0XHRyZXR1cm4gdGhpcy5zdHJhdGVneS5rZXlDaGFuZ2VzLnBpcGUoXG5cdFx0XHRmaWx0ZXIoKGNoYW5nZWQ6IHN0cmluZykgPT4gY2hhbmdlZCA9PT0gbnVsbCB8fCBjaGFuZ2VkID09PSBrZXkpLFxuXHRcdFx0c3dpdGNoTWFwKCgpID0+IHRoaXMuc3RyYXRlZ3kuZ2V0KGtleSkpLFxuXHRcdFx0ZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcblx0XHRcdHNoYXJlUmVwbGF5KClcblx0XHQpO1xuXHR9XG5cbn1cbiJdfQ==