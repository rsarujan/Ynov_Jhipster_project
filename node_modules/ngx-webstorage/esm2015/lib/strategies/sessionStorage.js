var SessionStorageStrategy_1;
import { __decorate, __metadata, __param } from "tslib";
import { StrategyCacheService } from '../core/strategyCache';
import { BaseSyncStorageStrategy } from './baseSyncStorage';
import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';
import { SESSION_STORAGE } from '../core/nativeStorage';
import { StorageStrategies } from '../constants/strategy';
import { isPlatformBrowser } from '@angular/common';
let SessionStorageStrategy = SessionStorageStrategy_1 = class SessionStorageStrategy extends BaseSyncStorageStrategy {
    constructor(storage, cache, platformId, zone) {
        super(storage, cache);
        this.storage = storage;
        this.cache = cache;
        this.platformId = platformId;
        this.zone = zone;
        this.name = SessionStorageStrategy_1.strategyName;
        if (isPlatformBrowser(this.platformId))
            this.listenExternalChanges();
    }
    listenExternalChanges() {
        window.addEventListener('storage', (event) => this.zone.run(() => {
            if (event.storageArea !== this.storage)
                return;
            const key = event.key;
            if (event.key !== null)
                this.cache.del(this.name, event.key);
            else
                this.cache.clear(this.name);
            this.keyChanges.next(key);
        }));
    }
};
SessionStorageStrategy.strategyName = StorageStrategies.Session;
SessionStorageStrategy.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [SESSION_STORAGE,] }] },
    { type: StrategyCacheService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone }
];
SessionStorageStrategy = SessionStorageStrategy_1 = __decorate([
    Injectable(),
    __param(0, Inject(SESSION_STORAGE)),
    __param(2, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [Object, StrategyCacheService, Object, NgZone])
], SessionStorageStrategy);
export { SessionStorageStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvblN0b3JhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtd2Vic3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9zdHJhdGVnaWVzL3Nlc3Npb25TdG9yYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDMUQsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFJbEQsSUFBYSxzQkFBc0IsOEJBQW5DLE1BQWEsc0JBQXVCLFNBQVEsdUJBQXVCO0lBSWxFLFlBQStDLE9BQW1CLEVBQzVDLEtBQTJCLEVBQ04sVUFBZSxFQUNwQyxJQUFZO1FBQ2pDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFKd0IsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUM1QyxVQUFLLEdBQUwsS0FBSyxDQUFzQjtRQUNOLGVBQVUsR0FBVixVQUFVLENBQUs7UUFDcEMsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUx6QixTQUFJLEdBQVcsd0JBQXNCLENBQUMsWUFBWSxDQUFDO1FBTzNELElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUFFLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ3RFLENBQUM7SUFFUyxxQkFBcUI7UUFDOUIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQW1CLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUM5RSxJQUFJLEtBQUssQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLE9BQU87Z0JBQUUsT0FBTztZQUMvQyxNQUFNLEdBQUcsR0FBVyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQzlCLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxJQUFJO2dCQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztnQkFDeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBRUQsQ0FBQTtBQXJCZ0IsbUNBQVksR0FBVyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7OzRDQUdwRCxNQUFNLFNBQUMsZUFBZTtZQUNOLG9CQUFvQjs0Q0FDcEMsTUFBTSxTQUFDLFdBQVc7WUFDSCxNQUFNOztBQVB0QixzQkFBc0I7SUFEbEMsVUFBVSxFQUFFO0lBS0MsV0FBQSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7SUFFdkIsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7NkNBREgsb0JBQW9CLFVBRXJCLE1BQU07R0FQdEIsc0JBQXNCLENBc0JsQztTQXRCWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0cmF0ZWd5Q2FjaGVTZXJ2aWNlfSBmcm9tICcuLi9jb3JlL3N0cmF0ZWd5Q2FjaGUnO1xuaW1wb3J0IHtCYXNlU3luY1N0b3JhZ2VTdHJhdGVneX0gZnJvbSAnLi9iYXNlU3luY1N0b3JhZ2UnO1xuaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZSwgUExBVEZPUk1fSUR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTRVNTSU9OX1NUT1JBR0V9IGZyb20gJy4uL2NvcmUvbmF0aXZlU3RvcmFnZSc7XG5pbXBvcnQge1N0b3JhZ2VTdHJhdGVnaWVzfSBmcm9tICcuLi9jb25zdGFudHMvc3RyYXRlZ3knO1xuaW1wb3J0IHtpc1BsYXRmb3JtQnJvd3Nlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7V2ViU3RvcmFnZX0gZnJvbSAnLi4vY29yZS9pbnRlcmZhY2VzL3dlYlN0b3JhZ2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2Vzc2lvblN0b3JhZ2VTdHJhdGVneSBleHRlbmRzIEJhc2VTeW5jU3RvcmFnZVN0cmF0ZWd5IHtcblx0c3RhdGljIHJlYWRvbmx5IHN0cmF0ZWd5TmFtZTogc3RyaW5nID0gU3RvcmFnZVN0cmF0ZWdpZXMuU2Vzc2lvbjtcblx0cmVhZG9ubHkgbmFtZTogc3RyaW5nID0gU2Vzc2lvblN0b3JhZ2VTdHJhdGVneS5zdHJhdGVneU5hbWU7XG5cblx0Y29uc3RydWN0b3IoQEluamVjdChTRVNTSU9OX1NUT1JBR0UpIHByb3RlY3RlZCBzdG9yYWdlOiBXZWJTdG9yYWdlLFxuXHQgICAgICAgICAgICBwcm90ZWN0ZWQgY2FjaGU6IFN0cmF0ZWd5Q2FjaGVTZXJ2aWNlLFxuXHQgICAgICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcm90ZWN0ZWQgcGxhdGZvcm1JZDogYW55LFxuXHQgICAgICAgICAgICBwcm90ZWN0ZWQgem9uZTogTmdab25lKSB7XG5cdFx0c3VwZXIoc3RvcmFnZSwgY2FjaGUpO1xuXHRcdGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB0aGlzLmxpc3RlbkV4dGVybmFsQ2hhbmdlcygpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGxpc3RlbkV4dGVybmFsQ2hhbmdlcygpIHtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIChldmVudDogU3RvcmFnZUV2ZW50KSA9PiB0aGlzLnpvbmUucnVuKCgpID0+IHtcblx0XHRcdGlmIChldmVudC5zdG9yYWdlQXJlYSAhPT0gdGhpcy5zdG9yYWdlKSByZXR1cm47XG5cdFx0XHRjb25zdCBrZXk6IHN0cmluZyA9IGV2ZW50LmtleTtcblx0XHRcdGlmIChldmVudC5rZXkgIT09IG51bGwpIHRoaXMuY2FjaGUuZGVsKHRoaXMubmFtZSwgZXZlbnQua2V5KTtcblx0XHRcdGVsc2UgdGhpcy5jYWNoZS5jbGVhcih0aGlzLm5hbWUpO1xuXHRcdFx0dGhpcy5rZXlDaGFuZ2VzLm5leHQoa2V5KTtcblx0XHR9KSk7XG5cdH1cblxufVxuIl19