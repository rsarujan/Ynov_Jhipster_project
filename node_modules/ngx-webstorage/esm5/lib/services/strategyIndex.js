import { __decorate, __metadata, __param } from "tslib";
import { Subject } from 'rxjs';
import { Inject, Injectable, Optional } from '@angular/core';
import { STORAGE_STRATEGIES } from '../strategies';
import { StorageStrategies } from '../constants/strategy';
import * as i0 from "@angular/core";
import * as i1 from "../strategies/index";
export var InvalidStrategyError = 'invalid_strategy';
var StrategyIndex = /** @class */ (function () {
    function StrategyIndex(strategies) {
        this.strategies = strategies;
        this.registration$ = new Subject();
        if (!strategies)
            strategies = [];
        this.strategies = strategies.reverse()
            .map(function (strategy, index, arr) { return strategy.name; })
            .map(function (name, index, arr) { return arr.indexOf(name) === index ? index : null; })
            .filter(function (index) { return index !== null; })
            .map(function (index) { return strategies[index]; });
    }
    StrategyIndex_1 = StrategyIndex;
    StrategyIndex.get = function (name) {
        if (!this.isStrategyRegistered(name))
            throw Error(InvalidStrategyError);
        var strategy = this.index[name];
        if (!strategy.isAvailable) {
            strategy = this.index[StorageStrategies.InMemory];
        }
        return strategy;
    };
    StrategyIndex.set = function (name, strategy) {
        this.index[name] = strategy;
    };
    StrategyIndex.clear = function (name) {
        if (name !== undefined)
            delete this.index[name];
        else
            this.index = {};
    };
    StrategyIndex.isStrategyRegistered = function (name) {
        return name in this.index;
    };
    StrategyIndex.hasRegistredStrategies = function () {
        return Object.keys(this.index).length > 0;
    };
    StrategyIndex.prototype.getStrategy = function (name) {
        return StrategyIndex_1.get(name);
    };
    StrategyIndex.prototype.indexStrategies = function () {
        var _this = this;
        this.strategies.forEach(function (strategy) { return _this.register(strategy.name, strategy); });
    };
    StrategyIndex.prototype.indexStrategy = function (name, overrideIfExists) {
        if (overrideIfExists === void 0) { overrideIfExists = false; }
        if (StrategyIndex_1.isStrategyRegistered(name) && !overrideIfExists)
            return StrategyIndex_1.get(name);
        var strategy = this.strategies.find(function (strategy) { return strategy.name === name; });
        if (!strategy)
            throw new Error(InvalidStrategyError);
        this.register(name, strategy, overrideIfExists);
        return strategy;
    };
    StrategyIndex.prototype.register = function (name, strategy, overrideIfExists) {
        if (overrideIfExists === void 0) { overrideIfExists = false; }
        if (!StrategyIndex_1.isStrategyRegistered(name) || overrideIfExists) {
            StrategyIndex_1.set(name, strategy);
            this.registration$.next(name);
        }
    };
    var StrategyIndex_1;
    StrategyIndex.index = {};
    StrategyIndex.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [STORAGE_STRATEGIES,] }] }
    ]; };
    StrategyIndex.ɵprov = i0.ɵɵdefineInjectable({ factory: function StrategyIndex_Factory() { return new StrategyIndex(i0.ɵɵinject(i1.STORAGE_STRATEGIES, 8)); }, token: StrategyIndex, providedIn: "root" });
    StrategyIndex = StrategyIndex_1 = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(0, Optional()), __param(0, Inject(STORAGE_STRATEGIES)),
        __metadata("design:paramtypes", [Array])
    ], StrategyIndex);
    return StrategyIndex;
}());
export { StrategyIndex };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ3lJbmRleC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC13ZWJzdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0cmF0ZWd5SW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBRXhELE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLGtCQUFrQixDQUFDO0FBR3ZEO0lBS0MsdUJBQThELFVBQWtDO1FBQWxDLGVBQVUsR0FBVixVQUFVLENBQXdCO1FBRnZGLGtCQUFhLEdBQW9CLElBQUksT0FBTyxFQUFFLENBQUM7UUFHdkQsSUFBSSxDQUFDLFVBQVU7WUFBRSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRTthQUNwQyxHQUFHLENBQUMsVUFBQyxRQUE4QixFQUFFLEtBQUssRUFBRSxHQUFHLElBQUssT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFiLENBQWEsQ0FBQzthQUNsRSxHQUFHLENBQUMsVUFBQyxJQUFZLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBMUMsQ0FBMEMsQ0FBQzthQUM3RSxNQUFNLENBQUMsVUFBQyxLQUFhLElBQUssT0FBQSxLQUFLLEtBQUssSUFBSSxFQUFkLENBQWMsQ0FBQzthQUN6QyxHQUFHLENBQUMsVUFBQyxLQUFhLElBQUssT0FB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SSxNQUFNLFNBQUMsa0JBQWtCOzs7SUFMdEMsYUFBYTtRQUR6QixVQUFVLENBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDLENBQUM7UUFNbkIsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7O09BTHZDLGFBQWEsQ0ErRHpCO3dCQXhFRDtDQXdFQyxBQS9ERCxJQStEQztTQS9EWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdG9yYWdlU3RyYXRlZ3l9IGZyb20gJy4uL2NvcmUvaW50ZXJmYWNlcy9zdG9yYWdlU3RyYXRlZ3knO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1NUT1JBR0VfU1RSQVRFR0lFU30gZnJvbSAnLi4vc3RyYXRlZ2llcyc7XG5pbXBvcnQge1N0b3JhZ2VTdHJhdGVnaWVzfSBmcm9tICcuLi9jb25zdGFudHMvc3RyYXRlZ3knO1xuXG5leHBvcnQgY29uc3QgSW52YWxpZFN0cmF0ZWd5RXJyb3IgPSAnaW52YWxpZF9zdHJhdGVneSc7XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIFN0cmF0ZWd5SW5kZXgge1xuXG5cdHN0YXRpYyBpbmRleDogeyBbbmFtZTogc3RyaW5nXTogU3RvcmFnZVN0cmF0ZWd5PGFueT4gfSA9IHt9O1xuXHRyZWFkb25seSByZWdpc3RyYXRpb24kOiBTdWJqZWN0PHN0cmluZz4gPSBuZXcgU3ViamVjdCgpO1xuXG5cdGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoU1RPUkFHRV9TVFJBVEVHSUVTKSBwcm90ZWN0ZWQgc3RyYXRlZ2llczogU3RvcmFnZVN0cmF0ZWd5PGFueT5bXSkge1xuXHRcdGlmICghc3RyYXRlZ2llcykgc3RyYXRlZ2llcyA9IFtdO1xuXHRcdHRoaXMuc3RyYXRlZ2llcyA9IHN0cmF0ZWdpZXMucmV2ZXJzZSgpXG5cdFx0XHQubWFwKChzdHJhdGVneTogU3RvcmFnZVN0cmF0ZWd5PGFueT4sIGluZGV4LCBhcnIpID0+IHN0cmF0ZWd5Lm5hbWUpXG5cdFx0XHQubWFwKChuYW1lOiBzdHJpbmcsIGluZGV4LCBhcnIpID0+IGFyci5pbmRleE9mKG5hbWUpID09PSBpbmRleCA/IGluZGV4IDogbnVsbClcblx0XHRcdC5maWx0ZXIoKGluZGV4OiBudW1iZXIpID0+IGluZGV4ICE9PSBudWxsKVxuXHRcdFx0Lm1hcCgoaW5kZXg6IG51bWJlcikgPT4gc3RyYXRlZ2llc1tpbmRleF0pO1xuXHR9XG5cblx0c3RhdGljIGdldChuYW1lOiBzdHJpbmcpOiBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XG5cdFx0aWYgKCF0aGlzLmlzU3RyYXRlZ3lSZWdpc3RlcmVkKG5hbWUpKSB0aHJvdyBFcnJvcihJbnZhbGlkU3RyYXRlZ3lFcnJvcik7XG5cdFx0bGV0IHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PiA9IHRoaXMuaW5kZXhbbmFtZV07XG5cdFx0aWYgKCFzdHJhdGVneS5pc0F2YWlsYWJsZSkge1xuXHRcdFx0c3RyYXRlZ3kgPSB0aGlzLmluZGV4W1N0b3JhZ2VTdHJhdGVnaWVzLkluTWVtb3J5XTtcblx0XHR9XG5cdFx0cmV0dXJuIHN0cmF0ZWd5O1xuXHR9XG5cblx0c3RhdGljIHNldChuYW1lOiBzdHJpbmcsIHN0cmF0ZWd5KTogdm9pZCB7XG5cdFx0dGhpcy5pbmRleFtuYW1lXSA9IHN0cmF0ZWd5O1xuXHR9XG5cblx0c3RhdGljIGNsZWFyKG5hbWU/OiBzdHJpbmcpOiB2b2lkIHtcblx0XHRpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSBkZWxldGUgdGhpcy5pbmRleFtuYW1lXTtcblx0XHRlbHNlIHRoaXMuaW5kZXggPSB7fTtcblx0fVxuXG5cdHN0YXRpYyBpc1N0cmF0ZWd5UmVnaXN0ZXJlZChuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gbmFtZSBpbiB0aGlzLmluZGV4O1xuXHR9XG5cblx0c3RhdGljIGhhc1JlZ2lzdHJlZFN0cmF0ZWdpZXMoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuaW5kZXgpLmxlbmd0aCA+IDA7XG5cdH1cblxuXHRwdWJsaWMgZ2V0U3RyYXRlZ3kobmFtZTogc3RyaW5nKTogU3RvcmFnZVN0cmF0ZWd5PGFueT4ge1xuXHRcdHJldHVybiBTdHJhdGVneUluZGV4LmdldChuYW1lKTtcblx0fVxuXG5cdHB1YmxpYyBpbmRleFN0cmF0ZWdpZXMoKSB7XG5cdFx0dGhpcy5zdHJhdGVnaWVzLmZvckVhY2goKHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PikgPT4gdGhpcy5yZWdpc3RlcihzdHJhdGVneS5uYW1lLCBzdHJhdGVneSkpO1xuXHR9XG5cblx0cHVibGljIGluZGV4U3RyYXRlZ3kobmFtZTogc3RyaW5nLCBvdmVycmlkZUlmRXhpc3RzOiBib29sZWFuID0gZmFsc2UpOiBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XG5cdFx0aWYgKFN0cmF0ZWd5SW5kZXguaXNTdHJhdGVneVJlZ2lzdGVyZWQobmFtZSkgJiYgIW92ZXJyaWRlSWZFeGlzdHMpIHJldHVybiBTdHJhdGVneUluZGV4LmdldChuYW1lKTtcblx0XHRjb25zdCBzdHJhdGVneTogU3RvcmFnZVN0cmF0ZWd5PGFueT4gPSB0aGlzLnN0cmF0ZWdpZXMuZmluZCgoc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+KSA9PiBzdHJhdGVneS5uYW1lID09PSBuYW1lKTtcblx0XHRpZiAoIXN0cmF0ZWd5KSB0aHJvdyBuZXcgRXJyb3IoSW52YWxpZFN0cmF0ZWd5RXJyb3IpO1xuXHRcdHRoaXMucmVnaXN0ZXIobmFtZSwgc3RyYXRlZ3ksIG92ZXJyaWRlSWZFeGlzdHMpO1xuXHRcdHJldHVybiBzdHJhdGVneTtcblx0fVxuXG5cdHB1YmxpYyByZWdpc3RlcihuYW1lOiBzdHJpbmcsIHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55Piwgb3ZlcnJpZGVJZkV4aXN0czogYm9vbGVhbiA9IGZhbHNlKSB7XG5cdFx0aWYgKCFTdHJhdGVneUluZGV4LmlzU3RyYXRlZ3lSZWdpc3RlcmVkKG5hbWUpIHx8IG92ZXJyaWRlSWZFeGlzdHMpIHtcblx0XHRcdFN0cmF0ZWd5SW5kZXguc2V0KG5hbWUsIHN0cmF0ZWd5KTtcblx0XHRcdHRoaXMucmVnaXN0cmF0aW9uJC5uZXh0KG5hbWUpO1xuXHRcdH1cblx0fVxuXG59XG5cbiJdfQ==