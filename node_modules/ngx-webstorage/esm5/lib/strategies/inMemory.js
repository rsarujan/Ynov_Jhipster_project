import { __decorate, __metadata, __param } from "tslib";
import { of, Subject } from 'rxjs';
import { StrategyCacheService } from '../core/strategyCache';
import { StorageStrategies } from '../constants/strategy';
import { Inject, Injectable } from '@angular/core';
var InMemoryStorageStrategy = /** @class */ (function () {
    function InMemoryStorageStrategy(cache) {
        this.cache = cache;
        this.keyChanges = new Subject();
        this.isAvailable = true;
        this.name = InMemoryStorageStrategy_1.strategyName;
    }
    InMemoryStorageStrategy_1 = InMemoryStorageStrategy;
    InMemoryStorageStrategy.prototype.get = function (key) {
        return of(this.cache.get(this.name, key));
    };
    InMemoryStorageStrategy.prototype.set = function (key, value) {
        this.cache.set(this.name, key, value);
        this.keyChanges.next(key);
        return of(value);
    };
    InMemoryStorageStrategy.prototype.del = function (key) {
        this.cache.del(this.name, key);
        this.keyChanges.next(key);
        return of(null);
    };
    InMemoryStorageStrategy.prototype.clear = function () {
        this.cache.clear(this.name);
        this.keyChanges.next(null);
        return of(null);
    };
    var InMemoryStorageStrategy_1;
    InMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;
    InMemoryStorageStrategy.ctorParameters = function () { return [
        { type: StrategyCacheService, decorators: [{ type: Inject, args: [StrategyCacheService,] }] }
    ]; };
    InMemoryStorageStrategy = InMemoryStorageStrategy_1 = __decorate([
        Injectable(),
        __param(0, Inject(StrategyCacheService)),
        __metadata("design:paramtypes", [StrategyCacheService])
    ], InMemoryStorageStrategy);
    return InMemoryStorageStrategy;
}());
export { InMemoryStorageStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5NZW1vcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtd2Vic3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9zdHJhdGVnaWVzL2luTWVtb3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQWEsRUFBRSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUdqRDtJQU1DLGlDQUFvRCxLQUEyQjtRQUEzQixVQUFLLEdBQUwsS0FBSyxDQUFzQjtRQUp0RSxlQUFVLEdBQW9CLElBQUksT0FBTyxFQUFFLENBQUM7UUFDckQsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFDbkIsU0FBSSxHQUFXLHlCQUF1QixDQUFDLFlBQVksQ0FBQztJQUVxQixDQUFDO2dDQU52RSx1QkFBdUI7SUFRbkMscUNBQUcsR0FBSCxVQUFJLEdBQVc7UUFDZCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELHFDQUFHLEdBQUgsVUFBSSxHQUFXLEVBQUUsS0FBVTtRQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQscUNBQUcsR0FBSCxVQUFJLEdBQVc7UUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFRCx1Q0FBSyxHQUFMO1FBQ0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7O0lBM0JlLG9DQUFZLEdBQVcsaUJBQWlCLENBQUMsUUFBUSxDQUFDOztnQkFLUCxvQkFBb0IsdUJBQWxFLE1BQU0sU0FBQyxvQkFBb0I7O0lBTjVCLHVCQUF1QjtRQURuQyxVQUFVLEVBQUU7UUFPQyxXQUFBLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO3lDQUFrQixvQkFBb0I7T0FObkUsdUJBQXVCLENBOEJuQztJQUFELDhCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0E5QlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdG9yYWdlU3RyYXRlZ3l9IGZyb20gJy4uL2NvcmUvaW50ZXJmYWNlcy9zdG9yYWdlU3RyYXRlZ3knO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBvZiwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1N0cmF0ZWd5Q2FjaGVTZXJ2aWNlfSBmcm9tICcuLi9jb3JlL3N0cmF0ZWd5Q2FjaGUnO1xuaW1wb3J0IHtTdG9yYWdlU3RyYXRlZ2llc30gZnJvbSAnLi4vY29uc3RhbnRzL3N0cmF0ZWd5JztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEluTWVtb3J5U3RvcmFnZVN0cmF0ZWd5IGltcGxlbWVudHMgU3RvcmFnZVN0cmF0ZWd5PGFueT4ge1xuXHRzdGF0aWMgcmVhZG9ubHkgc3RyYXRlZ3lOYW1lOiBzdHJpbmcgPSBTdG9yYWdlU3RyYXRlZ2llcy5Jbk1lbW9yeTtcblx0cmVhZG9ubHkga2V5Q2hhbmdlczogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3QoKTtcblx0aXNBdmFpbGFibGU6IGJvb2xlYW4gPSB0cnVlO1xuXHRyZWFkb25seSBuYW1lOiBzdHJpbmcgPSBJbk1lbW9yeVN0b3JhZ2VTdHJhdGVneS5zdHJhdGVneU5hbWU7XG5cblx0Y29uc3RydWN0b3IoQEluamVjdChTdHJhdGVneUNhY2hlU2VydmljZSkgcHJvdGVjdGVkIGNhY2hlOiBTdHJhdGVneUNhY2hlU2VydmljZSkge31cblxuXHRnZXQoa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuXHRcdHJldHVybiBvZih0aGlzLmNhY2hlLmdldCh0aGlzLm5hbWUsIGtleSkpO1xuXHR9XG5cblx0c2V0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcblx0XHR0aGlzLmNhY2hlLnNldCh0aGlzLm5hbWUsIGtleSwgdmFsdWUpO1xuXHRcdHRoaXMua2V5Q2hhbmdlcy5uZXh0KGtleSk7XG5cdFx0cmV0dXJuIG9mKHZhbHVlKTtcblx0fVxuXG5cdGRlbChrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8dm9pZD4ge1xuXHRcdHRoaXMuY2FjaGUuZGVsKHRoaXMubmFtZSwga2V5KTtcblx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChrZXkpO1xuXHRcdHJldHVybiBvZihudWxsKTtcblx0fVxuXG5cdGNsZWFyKCk6IE9ic2VydmFibGU8dm9pZD4ge1xuXHRcdHRoaXMuY2FjaGUuY2xlYXIodGhpcy5uYW1lKTtcblx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChudWxsKTtcblx0XHRyZXR1cm4gb2YobnVsbCk7XG5cdH1cblxufVxuIl19