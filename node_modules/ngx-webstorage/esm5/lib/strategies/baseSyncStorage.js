import { of, Subject } from 'rxjs';
import { CompatHelper } from '../helpers/compat';
var BaseSyncStorageStrategy = /** @class */ (function () {
    function BaseSyncStorageStrategy(storage, cache) {
        this.storage = storage;
        this.cache = cache;
        this.keyChanges = new Subject();
    }
    Object.defineProperty(BaseSyncStorageStrategy.prototype, "isAvailable", {
        get: function () {
            if (this._isAvailable === undefined)
                this._isAvailable = CompatHelper.isStorageAvailable(this.storage);
            return this._isAvailable;
        },
        enumerable: true,
        configurable: true
    });
    BaseSyncStorageStrategy.prototype.get = function (key) {
        var data = this.cache.get(this.name, key);
        if (data !== undefined)
            return of(data);
        try {
            var item = this.storage.getItem(key);
            if (item !== null) {
                data = JSON.parse(item);
                this.cache.set(this.name, key, data);
            }
        }
        catch (err) {
            console.warn(err);
        }
        return of(data);
    };
    BaseSyncStorageStrategy.prototype.set = function (key, value) {
        var data = JSON.stringify(value);
        this.storage.setItem(key, data);
        this.cache.set(this.name, key, value);
        this.keyChanges.next(key);
        return of(value);
    };
    BaseSyncStorageStrategy.prototype.del = function (key) {
        this.storage.removeItem(key);
        this.cache.del(this.name, key);
        this.keyChanges.next(key);
        return of(null);
    };
    BaseSyncStorageStrategy.prototype.clear = function () {
        this.storage.clear();
        this.cache.clear(this.name);
        this.keyChanges.next(null);
        return of(null);
    };
    return BaseSyncStorageStrategy;
}());
export { BaseSyncStorageStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZVN5bmNTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXdlYnN0b3JhZ2UvIiwic291cmNlcyI6WyJsaWIvc3RyYXRlZ2llcy9iYXNlU3luY1N0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFhLEVBQUUsRUFBRSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFN0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRy9DO0lBSUMsaUNBQXNCLE9BQW1CLEVBQVksS0FBMkI7UUFBMUQsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFZLFVBQUssR0FBTCxLQUFLLENBQXNCO1FBSHZFLGVBQVUsR0FBb0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUc4QixDQUFDO0lBSXBGLHNCQUFJLGdEQUFXO2FBQWY7WUFDQyxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssU0FBUztnQkFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkcsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzFCLENBQUM7OztPQUFBO0lBRUQscUNBQUcsR0FBSCxVQUFJLEdBQVc7UUFDZCxJQUFJLElBQUksR0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLElBQUksSUFBSSxLQUFLLFNBQVM7WUFBRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJO1lBQ0gsSUFBTSxJQUFJLEdBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUNsQixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDckM7U0FDRDtRQUFDLE9BQU0sR0FBRyxFQUFFO1lBQ1osT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQjtRQUVELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxxQ0FBRyxHQUFILFVBQUksR0FBVyxFQUFFLEtBQVU7UUFDMUIsSUFBTSxJQUFJLEdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELHFDQUFHLEdBQUgsVUFBSSxHQUFXO1FBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQsdUNBQUssR0FBTDtRQUNDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFRiw4QkFBQztBQUFELENBQUMsQUFwREQsSUFvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0b3JhZ2VTdHJhdGVneX0gZnJvbSAnLi4vY29yZS9pbnRlcmZhY2VzL3N0b3JhZ2VTdHJhdGVneSc7XG5pbXBvcnQge09ic2VydmFibGUsIG9mLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7U3RyYXRlZ3lDYWNoZVNlcnZpY2V9IGZyb20gJy4uL2NvcmUvc3RyYXRlZ3lDYWNoZSc7XG5pbXBvcnQge0NvbXBhdEhlbHBlcn0gZnJvbSAnLi4vaGVscGVycy9jb21wYXQnO1xuaW1wb3J0IHtXZWJTdG9yYWdlfSBmcm9tICcuLi9jb3JlL2ludGVyZmFjZXMvd2ViU3RvcmFnZSc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlU3luY1N0b3JhZ2VTdHJhdGVneSBpbXBsZW1lbnRzIFN0b3JhZ2VTdHJhdGVneTxhbnk+IHtcblx0cmVhZG9ubHkga2V5Q2hhbmdlczogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3QoKTtcblx0YWJzdHJhY3QgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzdG9yYWdlOiBXZWJTdG9yYWdlLCBwcm90ZWN0ZWQgY2FjaGU6IFN0cmF0ZWd5Q2FjaGVTZXJ2aWNlKSB7fVxuXG5cdHByb3RlY3RlZCBfaXNBdmFpbGFibGU6IGJvb2xlYW47XG5cblx0Z2V0IGlzQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xuXHRcdGlmICh0aGlzLl9pc0F2YWlsYWJsZSA9PT0gdW5kZWZpbmVkKSB0aGlzLl9pc0F2YWlsYWJsZSA9IENvbXBhdEhlbHBlci5pc1N0b3JhZ2VBdmFpbGFibGUodGhpcy5zdG9yYWdlKTtcblx0XHRyZXR1cm4gdGhpcy5faXNBdmFpbGFibGU7XG5cdH1cblx0XG5cdGdldChrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG5cdFx0bGV0IGRhdGE6IGFueSA9IHRoaXMuY2FjaGUuZ2V0KHRoaXMubmFtZSwga2V5KTtcblx0XHRpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gb2YoZGF0YSk7XG5cblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgaXRlbTogYW55ID0gdGhpcy5zdG9yYWdlLmdldEl0ZW0oa2V5KTtcblx0XHRcdGlmIChpdGVtICE9PSBudWxsKSB7XG5cdFx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGl0ZW0pO1xuXHRcdFx0XHR0aGlzLmNhY2hlLnNldCh0aGlzLm5hbWUsIGtleSwgZGF0YSk7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaChlcnIpIHtcblx0XHRcdGNvbnNvbGUud2FybihlcnIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBvZihkYXRhKTtcblx0fVxuXG5cdHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG5cdFx0Y29uc3QgZGF0YTogc3RyaW5nID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXHRcdHRoaXMuc3RvcmFnZS5zZXRJdGVtKGtleSwgZGF0YSk7XG5cdFx0dGhpcy5jYWNoZS5zZXQodGhpcy5uYW1lLCBrZXksIHZhbHVlKTtcblx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChrZXkpO1xuXHRcdHJldHVybiBvZih2YWx1ZSk7XG5cdH1cblxuXHRkZWwoa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcblx0XHR0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuXHRcdHRoaXMuY2FjaGUuZGVsKHRoaXMubmFtZSwga2V5KTtcblx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChrZXkpO1xuXHRcdHJldHVybiBvZihudWxsKTtcblx0fVxuXG5cdGNsZWFyKCk6IE9ic2VydmFibGU8dm9pZD4ge1xuXHRcdHRoaXMuc3RvcmFnZS5jbGVhcigpO1xuXHRcdHRoaXMuY2FjaGUuY2xlYXIodGhpcy5uYW1lKTtcblx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChudWxsKTtcblx0XHRyZXR1cm4gb2YobnVsbCk7XG5cdH1cblxufVxuIl19