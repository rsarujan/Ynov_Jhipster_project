import { noop } from '../../helpers/noop';
import { StorageKeyManager } from '../../helpers/storageKeyManager';
import { distinctUntilChanged, filter, shareReplay, switchMap } from 'rxjs/operators';
var SyncStorage = /** @class */ (function () {
    function SyncStorage(strategy) {
        this.strategy = strategy;
    }
    SyncStorage.prototype.retrieve = function (key) {
        var value;
        this.strategy.get(StorageKeyManager.normalize(key)).subscribe(function (result) { return value = typeof result === 'undefined' ? null : result; });
        return value;
    };
    SyncStorage.prototype.store = function (key, value) {
        this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);
        return value;
    };
    SyncStorage.prototype.clear = function (key) {
        if (key !== undefined)
            this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);
        else
            this.strategy.clear().subscribe(noop);
    };
    SyncStorage.prototype.getStrategyName = function () { return this.strategy.name; };
    SyncStorage.prototype.observe = function (key) {
        var _this = this;
        key = StorageKeyManager.normalize(key);
        return this.strategy.keyChanges.pipe(filter(function (changed) { return changed === null || changed === key; }), switchMap(function () { return _this.strategy.get(key); }), distinctUntilChanged(), shareReplay());
    };
    return SyncStorage;
}());
export { SyncStorage };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3luY1N0b3JhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtd2Vic3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL3RlbXBsYXRlcy9zeW5jU3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFeEMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFFbEUsT0FBTyxFQUFDLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEY7SUFDQyxxQkFBc0IsUUFBOEI7UUFBOUIsYUFBUSxHQUFSLFFBQVEsQ0FBc0I7SUFDcEQsQ0FBQztJQUVELDhCQUFRLEdBQVIsVUFBUyxHQUFXO1FBQ25CLElBQUksS0FBVSxDQUFDO1FBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsS0FBSyxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQXJELENBQXFELENBQUMsQ0FBQztRQUNqSSxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCwyQkFBSyxHQUFMLFVBQU0sR0FBVyxFQUFFLEtBQVU7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzRSxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCwyQkFBSyxHQUFMLFVBQU0sR0FBWTtRQUNqQixJQUFJLEdBQUcsS0FBSyxTQUFTO1lBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7WUFDaEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELHFDQUFlLEdBQWYsY0FBMkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFdkQsNkJBQU8sR0FBUCxVQUFRLEdBQVc7UUFBbkIsaUJBUUM7UUFQQSxHQUFHLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUNuQyxNQUFNLENBQUMsVUFBQyxPQUFlLElBQUssT0FBQSxPQUFPLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxHQUFHLEVBQW5DLENBQW1DLENBQUMsRUFDaEUsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBdEIsQ0FBc0IsQ0FBQyxFQUN2QyxvQkFBb0IsRUFBRSxFQUN0QixXQUFXLEVBQUUsQ0FDYixDQUFDO0lBQ0gsQ0FBQztJQUVGLGtCQUFDO0FBQUQsQ0FBQyxBQWpDRCxJQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RvcmFnZVN0cmF0ZWd5fSBmcm9tICcuLi9pbnRlcmZhY2VzL3N0b3JhZ2VTdHJhdGVneSc7XG5pbXBvcnQge25vb3B9IGZyb20gJy4uLy4uL2hlbHBlcnMvbm9vcCc7XG5pbXBvcnQge1N0b3JhZ2VTZXJ2aWNlfSBmcm9tICcuLi9pbnRlcmZhY2VzL3N0b3JhZ2VTZXJ2aWNlJztcbmltcG9ydCB7U3RvcmFnZUtleU1hbmFnZXJ9IGZyb20gJy4uLy4uL2hlbHBlcnMvc3RvcmFnZUtleU1hbmFnZXInO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgc2hhcmVSZXBsYXksIHN3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY2xhc3MgU3luY1N0b3JhZ2UgaW1wbGVtZW50cyBTdG9yYWdlU2VydmljZSB7XG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzdHJhdGVneTogU3RvcmFnZVN0cmF0ZWd5PGFueT4pIHtcblx0fVxuXG5cdHJldHJpZXZlKGtleTogc3RyaW5nKTogYW55IHtcblx0XHRsZXQgdmFsdWU6IGFueTtcblx0XHR0aGlzLnN0cmF0ZWd5LmdldChTdG9yYWdlS2V5TWFuYWdlci5ub3JtYWxpemUoa2V5KSkuc3Vic2NyaWJlKChyZXN1bHQpID0+IHZhbHVlID0gdHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVzdWx0KTtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHRzdG9yZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueSB7XG5cdFx0dGhpcy5zdHJhdGVneS5zZXQoU3RvcmFnZUtleU1hbmFnZXIubm9ybWFsaXplKGtleSksIHZhbHVlKS5zdWJzY3JpYmUobm9vcCk7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0Y2xlYXIoa2V5Pzogc3RyaW5nKTogdm9pZCB7XG5cdFx0aWYgKGtleSAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0dGhpcy5zdHJhdGVneS5kZWwoU3RvcmFnZUtleU1hbmFnZXIubm9ybWFsaXplKGtleSkpLnN1YnNjcmliZShub29wKTtcblx0XHRlbHNlIHRoaXMuc3RyYXRlZ3kuY2xlYXIoKS5zdWJzY3JpYmUobm9vcCk7XG5cdH1cblxuXHRnZXRTdHJhdGVneU5hbWUoKTogc3RyaW5nIHtyZXR1cm4gdGhpcy5zdHJhdGVneS5uYW1lOyB9XG5cblx0b2JzZXJ2ZShrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG5cdFx0a2V5ID0gU3RvcmFnZUtleU1hbmFnZXIubm9ybWFsaXplKGtleSk7XG5cdFx0cmV0dXJuIHRoaXMuc3RyYXRlZ3kua2V5Q2hhbmdlcy5waXBlKFxuXHRcdFx0ZmlsdGVyKChjaGFuZ2VkOiBzdHJpbmcpID0+IGNoYW5nZWQgPT09IG51bGwgfHwgY2hhbmdlZCA9PT0ga2V5KSxcblx0XHRcdHN3aXRjaE1hcCgoKSA9PiB0aGlzLnN0cmF0ZWd5LmdldChrZXkpKSxcblx0XHRcdGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG5cdFx0XHRzaGFyZVJlcGxheSgpXG5cdFx0KTtcblx0fVxuXG59XG4iXX0=