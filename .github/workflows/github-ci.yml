name: Application CI
on: [push, pull_request]
jobs:
    pipeline:
        name: proBiblio pipeline
        runs-on: ubuntu-latest
        if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.pull_request.title, '[skip ci]') && !contains(github.event.pull_request.title, '[ci skip]')"
        timeout-minutes: 40
        env:
            NODE_VERSION: 12.16.1
            SPRING_OUTPUT_ANSI_ENABLED: DETECT
            SPRING_JPA_SHOW_SQL: false
            JHI_DISABLE_WEBPACK_LOGS: true
            NG_CLI_ANALYTICS: false
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v1
              with:
                  node-version: 12.16.1
            - uses: actions/setup-java@v1
              with:
                  java-version: '11.x'
            - name: Install node.js packages
              run: npm install
            - name: Run backend test
              run: |
                  chmod +x mvnw
                  ./mvnw -ntp clean verify -P-webpack
            - name: Run frontend test
              run: npm run test
            #- name: Analyze code with SonarQube
            #  continue-on-error: true
            #  env:
            #      GITHUB_TOKEN: ${{ secrets.YOUR_GITHUB_TOKEN }}
            #      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            #  run: |
            #      if [ -n $SONAR_TOKEN ]; then
            #          ./mvnw -ntp initialize sonar:sonar -Dsonar.organization=${{secrets.SONAR_ORGANISATION_KEY}} -Dsonar.host.url=${{secrets.SONAR_URL}}
            #      else
            #          echo No SONAR_TOKEN, skipping...
            #      fi



            - name: Cache SonarCloud packages
              uses: actions/cache@v1
              with:
                path: ~/.sonar/cache
                key: ${{ runner.os }}-sonar
                restore-keys: ${{ runner.os }}-sonar
            - name: Cache Maven packages
              uses: actions/cache@v1
              with:
                path: ~/.m2
                key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                restore-keys: ${{ runner.os }}-m2
            - name: Build and analyze
              continue-on-error: true
              env:
                GITHUB_TOKEN: ${{ secrets.YOUR_GITHUB_TOKEN }}  # Needed to get PR information, if any
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              #run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
              run: |
                  if [ -n $SONAR_TOKEN ]; then
                      ./mvnw -ntp initialize sonar:sonar -Dsonar.organization=${{secrets.SONAR_ORGANISATION_KEY}} -Dsonar.host.url=${{secrets.SONAR_URL}}
                  else
                      echo No SONAR_TOKEN, skipping...
                  fi


            - name: Analyze code with SonarQube
              continue-on-error: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: |
                  java -version
                  if [ -n $SONAR_TOKEN ]; then
                      mvn -ntp initialize sonar:sonar -Dsonar.organization=${{ secrets.SONAR_ORGANISATION_KEY }} -Dsonar.host.url=${{ secrets.SONAR_URL }}
                  else
                      echo No SONAR_TOKEN, skipping...
                  fi
            #- name: Package application
            #  env:
            #    #maven-local-repo-path: ${{secrets.JFROG_OSS_REPO_SNAPSHOTS }}
            #    maven-repo-server-id: snapshots
            #    maven-repo-server-username: ${{ secrets.JFROG_OSS_REPO_USER }}
            #    maven-repo-server-password: ${{ secrets.JFROG_OSS_REPO_PASS }}
            #  run: |
            #      cat ~/.m2/settings.xml
            #      ./mvnw -ntp package deploy -Pprod -DskipTests

            - name: Package application -2 
              run: |
                echo '<?xml version="1.0" encoding="UTF-8"?>
                      <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
                      <servers>
                         <server>
                             <id>${{ secrets.JFROG_OSS_REPO_SNAPSHOTS }}</id>
                             <username>${{ secrets.JFROG_OSS_REPO_USER }}</username>
                             <password>${{ secrets.JFROG_OSS_REPO_PASS }}</password>
                         </server>
                     </servers>
                     </settings>' > ~/.m2/settings.xml
             
                 cat ~/.m2/settings.xml
                 mvn -ntp package deploy -Pprod -DskipTests

            - name: Deploy to Heroku
              if: github.event_name == 'push' && github.ref == 'refs/heads/master'
              env:
                  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
                  heroku_app_name: ${{secrets.HEROKU_APP_NAME}} #Must be unique in Heroku
                  heroku_email: ${{secrets.HEROKU_EMAIL}}
                  branch: "master"
                  buildpack: ${{secrets.HEROKU_BUILD_PACK}}
              run: ./mvnw -ntp com.heroku.sdk:heroku-maven-plugin:2.0.5:deploy -DskipTests -Pprod -Dheroku.buildpacks=heroku/jvm -Dheroku.appName=${{secrets.HEROKU_APP_NAME}}



            - name: Deploy to Herroku
              needs: pipeline
              runs-on: ubuntu-20.04
              steps:
                - uses: actions/checkout@v2
                - uses: akhileshns/heroku-deploy@v3.6.8 # This is the action
                  with:
                    heroku_api_key: ${{secrets.HEROKU_API_KEY}}
                    heroku_app_name: ${{secrets.HEROKU_APP_NAME}} #Must be unique in Heroku
                    heroku_email: ${{secrets.HEROKU_EMAIL}}
                    branch: "master"
                    buildpack: ${{secrets.HEROKU_BUILD_PACK}}