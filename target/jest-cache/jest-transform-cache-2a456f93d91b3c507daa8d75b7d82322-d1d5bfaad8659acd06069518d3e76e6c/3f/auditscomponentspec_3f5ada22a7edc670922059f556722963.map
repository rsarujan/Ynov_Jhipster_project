{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/admin/audits/audits.component.spec.ts","mappings":"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","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/admin/audits/audits.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, async } from '@angular/core/testing';\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\nimport { advanceTo } from 'jest-date-mock';\n\nimport { ProBiblioTestModule } from '../../../test.module';\nimport { AuditsComponent } from 'app/admin/audits/audits.component';\nimport { AuditsService } from 'app/admin/audits/audits.service';\nimport { Audit } from 'app/admin/audits/audit.model';\nimport { ITEMS_PER_PAGE } from 'app/shared/constants/pagination.constants';\nimport { MockRouter, MockActivatedRoute } from '../../../helpers/mock-route.service';\n\nfunction build2DigitsDatePart(datePart: number): string {\n  return `0${datePart}`.slice(-2);\n}\n\nfunction getDate(isToday = true): string {\n  let date: Date = new Date();\n  if (isToday) {\n    // Today + 1 day - needed if the current day must be included\n    date.setDate(date.getDate() + 1);\n  } else {\n    // get last month\n    if (date.getMonth() === 0) {\n      date = new Date(date.getFullYear() - 1, 11, date.getDate());\n    } else {\n      date = new Date(date.getFullYear(), date.getMonth() - 1, date.getDate());\n    }\n  }\n  const monthString = build2DigitsDatePart(date.getMonth() + 1);\n  const dateString = build2DigitsDatePart(date.getDate());\n  return `${date.getFullYear()}-${monthString}-${dateString}`;\n}\n\ndescribe('Component Tests', () => {\n  describe('AuditsComponent', () => {\n    let comp: AuditsComponent;\n    let fixture: ComponentFixture<AuditsComponent>;\n    let service: AuditsService;\n    let mockRouter: MockRouter;\n    let mockActivatedRoute: MockActivatedRoute;\n\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [ProBiblioTestModule],\n        declarations: [AuditsComponent],\n        providers: [AuditsService],\n      })\n        .overrideTemplate(AuditsComponent, '')\n        .compileComponents();\n    }));\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(AuditsComponent);\n      comp = fixture.componentInstance;\n      service = fixture.debugElement.injector.get(AuditsService);\n      mockRouter = TestBed.get(Router);\n      mockActivatedRoute = TestBed.get(ActivatedRoute);\n    });\n\n    describe('today function', () => {\n      it('should set toDate to current date', () => {\n        comp.ngOnInit();\n        expect(comp.toDate).toBe(getDate());\n      });\n\n      it('if current day is last day of month then should set toDate to first day of next month', () => {\n        advanceTo(new Date(2019, 0, 31, 0, 0, 0));\n        comp.ngOnInit();\n        expect(comp.toDate).toBe('2019-02-01');\n      });\n\n      it('if current day is not last day of month then should set toDate to next day of current month', () => {\n        advanceTo(new Date(2019, 0, 27, 0, 0, 0));\n        comp.ngOnInit();\n        expect(comp.toDate).toBe('2019-01-28');\n      });\n    });\n\n    describe('previousMonth function', () => {\n      it('should set fromDate to previous month', () => {\n        comp.ngOnInit();\n        expect(comp.fromDate).toBe(getDate(false));\n      });\n\n      it('if current month is January then should set fromDate to previous year last month', () => {\n        advanceTo(new Date(2019, 0, 20, 0, 0, 0));\n        comp.ngOnInit();\n        expect(comp.fromDate).toBe('2018-12-20');\n      });\n\n      it('if current month is not January then should set fromDate to current year previous month', () => {\n        advanceTo(new Date(2019, 1, 20, 0, 0, 0));\n        comp.ngOnInit();\n        expect(comp.fromDate).toBe('2019-01-20');\n      });\n    });\n\n    describe('By default, on init', () => {\n      it('should set all default values correctly', () => {\n        fixture.detectChanges();\n        expect(comp.toDate).toBe(getDate());\n        expect(comp.fromDate).toBe(getDate(false));\n        expect(comp.itemsPerPage).toBe(ITEMS_PER_PAGE);\n        expect(comp.page).toBe(1);\n        expect(comp.ascending).toBe(false);\n        expect(comp.predicate).toBe('id');\n      });\n    });\n\n    describe('OnInit', () => {\n      it('Should call load all on init', () => {\n        // GIVEN\n        const headers = new HttpHeaders().append('X-Total-Count', '1');\n        const audit = new Audit({ remoteAddress: '127.0.0.1', sessionId: '123' }, 'user', '20140101', 'AUTHENTICATION_SUCCESS');\n        spyOn(service, 'query').and.returnValue(\n          of(\n            new HttpResponse({\n              body: [audit],\n              headers,\n            })\n          )\n        );\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(service.query).toHaveBeenCalledTimes(1);\n        expect(comp.audits && comp.audits[0]).toEqual(jasmine.objectContaining(audit));\n        expect(comp.totalItems).toBe(1);\n      });\n    });\n\n    describe('Create sort object', () => {\n      beforeEach(() => {\n        spyOn(service, 'query').and.returnValue(of(new HttpResponse({ body: null })));\n      });\n\n      it('Should sort only by id asc', () => {\n        // GIVEN\n        mockActivatedRoute.setParameters({\n          sort: 'id,desc',\n        });\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(service.query).toBeCalledWith(\n          expect.objectContaining({\n            sort: ['id,desc'],\n          })\n        );\n      });\n\n      it('Should sort by timestamp asc then by id', () => {\n        // GIVEN\n        mockActivatedRoute.setParameters({\n          sort: 'timestamp,asc',\n        });\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(service.query).toBeCalledWith(\n          expect.objectContaining({\n            sort: ['timestamp,asc', 'id'],\n          })\n        );\n      });\n    });\n\n    describe('transition', () => {\n      it('Should not query data if fromDate and toDate are empty', () => {\n        // GIVEN\n        comp.toDate = '';\n        comp.fromDate = '';\n\n        // WHEN\n        comp.transition();\n\n        // THEN\n        expect(comp.canLoad()).toBe(false);\n        expect(mockRouter.navigateSpy).not.toBeCalled();\n      });\n\n      it('Should query data if fromDate and toDate are not empty', () => {\n        // GIVEN\n        comp.toDate = getDate();\n        comp.fromDate = getDate(false);\n\n        // WHEN\n        comp.transition();\n\n        // THEN\n        expect(comp.canLoad()).toBe(true);\n        expect(mockRouter.navigateSpy).toBeCalled();\n      });\n    });\n  });\n});\n"],"version":3}