{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/entities/emprunt/emprunt-delete-dialog.component.spec.ts","mappings":";;AAAA,mDAA2F;AAC3F,6DAA4D;AAC5D,+BAA0B;AAC1B,6CAA8C;AAE9C,sDAA2D;AAG3D,0GAAoG;AACpG,0EAAsE;AAEtE,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,IAAI,IAAkC,CAAC;QACvC,IAAI,OAAuD,CAAC;QAC5D,IAAI,OAAuB,CAAC;QAC5B,IAAI,gBAAkC,CAAC;QACvC,IAAI,eAAgC,CAAC;QAErC,UAAU,CAAC,GAAG,EAAE;YACd,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,OAAO,EAAE,CAAC,iCAAmB,CAAC;gBAC9B,YAAY,EAAE,CAAC,8DAA4B,CAAC;aAC7C,CAAC;iBACC,gBAAgB,CAAC,8DAA4B,EAAE,EAAE,CAAC;iBAClD,iBAAiB,EAAE,CAAC;YACvB,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,8DAA4B,CAAC,CAAC;YAChE,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;YACjC,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,gCAAc,CAAC,CAAC;YAC5D,gBAAgB,GAAG,iBAAO,CAAC,GAAG,CAAC,6BAAe,CAAC,CAAC;YAChD,eAAe,GAAG,iBAAO,CAAC,GAAG,CAAC,6BAAc,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;YAC7B,EAAE,CAAC,6CAA6C,EAAE,gBAAM,CACtD,EAAE,EACF,mBAAS,CAAC,GAAG,EAAE;gBACb,QAAQ;gBACR,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAEjD,OAAO;gBACP,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gBACxB,cAAI,EAAE,CAAC;gBAEP,OAAO;gBACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;gBACjD,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;gBACpD,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC3D,CAAC,CAAC,CACH,CAAC,CAAC;YAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;gBACjD,QAAQ;gBACR,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAEzB,OAAO;gBACP,IAAI,CAAC,MAAM,EAAE,CAAC;gBAEd,OAAO;gBACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;gBAC9C,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACxD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/entities/emprunt/emprunt-delete-dialog.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, inject, fakeAsync, tick } from '@angular/core/testing';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { of } from 'rxjs';\nimport { JhiEventManager } from 'ng-jhipster';\n\nimport { ProBiblioTestModule } from '../../../test.module';\nimport { MockEventManager } from '../../../helpers/mock-event-manager.service';\nimport { MockActiveModal } from '../../../helpers/mock-active-modal.service';\nimport { EmpruntDeleteDialogComponent } from 'app/entities/emprunt/emprunt-delete-dialog.component';\nimport { EmpruntService } from 'app/entities/emprunt/emprunt.service';\n\ndescribe('Component Tests', () => {\n  describe('Emprunt Management Delete Component', () => {\n    let comp: EmpruntDeleteDialogComponent;\n    let fixture: ComponentFixture<EmpruntDeleteDialogComponent>;\n    let service: EmpruntService;\n    let mockEventManager: MockEventManager;\n    let mockActiveModal: MockActiveModal;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [ProBiblioTestModule],\n        declarations: [EmpruntDeleteDialogComponent],\n      })\n        .overrideTemplate(EmpruntDeleteDialogComponent, '')\n        .compileComponents();\n      fixture = TestBed.createComponent(EmpruntDeleteDialogComponent);\n      comp = fixture.componentInstance;\n      service = fixture.debugElement.injector.get(EmpruntService);\n      mockEventManager = TestBed.get(JhiEventManager);\n      mockActiveModal = TestBed.get(NgbActiveModal);\n    });\n\n    describe('confirmDelete', () => {\n      it('Should call delete service on confirmDelete', inject(\n        [],\n        fakeAsync(() => {\n          // GIVEN\n          spyOn(service, 'delete').and.returnValue(of({}));\n\n          // WHEN\n          comp.confirmDelete(123);\n          tick();\n\n          // THEN\n          expect(service.delete).toHaveBeenCalledWith(123);\n          expect(mockActiveModal.closeSpy).toHaveBeenCalled();\n          expect(mockEventManager.broadcastSpy).toHaveBeenCalled();\n        })\n      ));\n\n      it('Should not call delete service on clear', () => {\n        // GIVEN\n        spyOn(service, 'delete');\n\n        // WHEN\n        comp.cancel();\n\n        // THEN\n        expect(service.delete).not.toHaveBeenCalled();\n        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();\n      });\n    });\n  });\n});\n"],"version":3}