{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/entities/emprunt/emprunt-update.component.spec.ts","mappings":";;AAAA,mDAAmF;AACnF,+CAAoD;AACpD,0CAA6C;AAC7C,+BAA0B;AAE1B,sDAA2D;AAC3D,4FAAuF;AACvF,0EAAsE;AACtE,kEAAyD;AAEzD,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,IAAI,IAA4B,CAAC;QACjC,IAAI,OAAiD,CAAC;QACtD,IAAI,OAAuB,CAAC;QAE5B,UAAU,CAAC,GAAG,EAAE;YACd,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,OAAO,EAAE,CAAC,iCAAmB,CAAC;gBAC9B,YAAY,EAAE,CAAC,iDAAsB,CAAC;gBACtC,SAAS,EAAE,CAAC,mBAAW,CAAC;aACzB,CAAC;iBACC,gBAAgB,CAAC,iDAAsB,EAAE,EAAE,CAAC;iBAC5C,iBAAiB,EAAE,CAAC;YAEvB,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,iDAAsB,CAAC,CAAC;YAC1D,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;YACjC,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,gCAAc,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;YACpB,EAAE,CAAC,wDAAwD,EAAE,mBAAS,CAAC,GAAG,EAAE;gBAC1E,QAAQ;gBACR,MAAM,MAAM,GAAG,IAAI,uBAAO,CAAC,GAAG,CAAC,CAAC;gBAChC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,CAAC,IAAI,mBAAY,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjF,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACxB,OAAO;gBACP,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,cAAI,EAAE,CAAC,CAAC,iBAAiB;gBAEzB,OAAO;gBACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;gBACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,CAAC;YAEJ,EAAE,CAAC,mDAAmD,EAAE,mBAAS,CAAC,GAAG,EAAE;gBACrE,QAAQ;gBACR,MAAM,MAAM,GAAG,IAAI,uBAAO,EAAE,CAAC;gBAC7B,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,CAAC,IAAI,mBAAY,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjF,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACxB,OAAO;gBACP,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,cAAI,EAAE,CAAC,CAAC,iBAAiB;gBAEzB,OAAO;gBACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;gBACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/entities/emprunt/emprunt-update.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpResponse } from '@angular/common/http';\nimport { FormBuilder } from '@angular/forms';\nimport { of } from 'rxjs';\n\nimport { ProBiblioTestModule } from '../../../test.module';\nimport { EmpruntUpdateComponent } from 'app/entities/emprunt/emprunt-update.component';\nimport { EmpruntService } from 'app/entities/emprunt/emprunt.service';\nimport { Emprunt } from 'app/shared/model/emprunt.model';\n\ndescribe('Component Tests', () => {\n  describe('Emprunt Management Update Component', () => {\n    let comp: EmpruntUpdateComponent;\n    let fixture: ComponentFixture<EmpruntUpdateComponent>;\n    let service: EmpruntService;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [ProBiblioTestModule],\n        declarations: [EmpruntUpdateComponent],\n        providers: [FormBuilder],\n      })\n        .overrideTemplate(EmpruntUpdateComponent, '')\n        .compileComponents();\n\n      fixture = TestBed.createComponent(EmpruntUpdateComponent);\n      comp = fixture.componentInstance;\n      service = fixture.debugElement.injector.get(EmpruntService);\n    });\n\n    describe('save', () => {\n      it('Should call update service on save for existing entity', fakeAsync(() => {\n        // GIVEN\n        const entity = new Emprunt(123);\n        spyOn(service, 'update').and.returnValue(of(new HttpResponse({ body: entity })));\n        comp.updateForm(entity);\n        // WHEN\n        comp.save();\n        tick(); // simulate async\n\n        // THEN\n        expect(service.update).toHaveBeenCalledWith(entity);\n        expect(comp.isSaving).toEqual(false);\n      }));\n\n      it('Should call create service on save for new entity', fakeAsync(() => {\n        // GIVEN\n        const entity = new Emprunt();\n        spyOn(service, 'create').and.returnValue(of(new HttpResponse({ body: entity })));\n        comp.updateForm(entity);\n        // WHEN\n        comp.save();\n        tick(); // simulate async\n\n        // THEN\n        expect(service.create).toHaveBeenCalledWith(entity);\n        expect(comp.isSaving).toEqual(false);\n      }));\n    });\n  });\n});\n"],"version":3}