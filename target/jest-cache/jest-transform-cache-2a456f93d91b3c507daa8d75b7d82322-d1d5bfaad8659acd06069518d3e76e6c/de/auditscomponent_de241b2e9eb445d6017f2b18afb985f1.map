{"version":3,"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/main/webapp/app/admin/audits/audits.component.ts"],"names":[],"mappingseAAA,CAAA,CAAA;AAEA,MAAA,QAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;AACA,MAAA,QAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;AACA,MAAA,MAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AAEA,MAAA,sBAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,2CAAA,CAAA,CAAA;AAEA,MAAA,gBAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;;;AAMA,IAAa,eAAe,GAA5B,MAAa,eAAb,CAA4B;AAY1B,EAAA,WAAA,CACU,aADV,EAEU,cAFV,EAGU,QAHV,EAIU,MAJV,EAIwB;AAAA;AAAA;AAAA;AAHd,SAAA,aAAA,GAAA,aAAA;;AAGc;AAAA;AAFd,SAAA,cAAA,GAAA,cAAA;;AAEc;AAAA;AADd,SAAA,QAAA,GAAA,QAAA;;AACc;AAAA;AAAd,SAAA,MAAA,GAAA,MAAA;;AAAc;AAAA;AAdxB,SAAA,QAAA,GAAW,EAAX;;AAcwB;AAAA;AAbxB,SAAA,YAAA,GAAe,sBAAA,CAAA,cAAf;;AAawB;AAAA;AATxB,SAAA,MAAA,GAAS,EAAT;;AASwB;AAAA;AARxB,SAAA,UAAA,GAAa,CAAb;;AAQwB;AAAA;AANhB,SAAA,UAAA,GAAa,YAAb;AAOJ;;AAEJ,EAAA,QAAQ,GAAA;AAAA;AAAA;AAAA;AACN,SAAK,MAAL,GAAc,KAAK,KAAL,EAAd;;AADM;AAAA;AAEN,SAAK,QAAL,GAAgB,KAAK,aAAL,EAAhB;;AAFM;AAAA;AAGN,SAAK,gBAAL;AACD;;AAED,EAAA,OAAO,GAAA;AAAA;AAAA;AAAA;AACL,WAAO;AAAA;AAAA,wCAAK,QAAL,KAAkB,EAAlB;AAAA;AAAA,mCAAwB,KAAK,MAAL,KAAgB,EAAxC;AAAP;AACD;;AAED,EAAA,UAAU,GAAA;AAAA;AAAA;AAAA;;AACR,QAAI,KAAK,OAAL,EAAJ,EAAoB;AAAA;AAAA;AAAA;AAClB,WAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,eAAD,CAArB,EAAwC;AACtC,QAAA,WAAW,EAAE;AACX,UAAA,IAAI,EAAE,KAAK,IADA;AAEX,UAAA,IAAI,EAAE,KAAK,SAAL,GAAiB,GAAjB,IAAwB,KAAK,SAAL;AAAA;AAAA,uCAAiB,KAAjB;AAAA;AAAA,uCAAyB,MAAzB,CAAxB,CAFK;AAGX,UAAA,IAAI,EAAE,KAAK,QAHA;AAIX,UAAA,EAAE,EAAE,KAAK;AAJE;AADyB,OAAxC;AAQD,KATD;AAAA;AAAA;AAAA;AAAA;AAUD;;AAEO,EAAA,aAAa,GAAA;AAAA;AAAA;AACnB,QAAI,IAAI;AAAA;AAAA,+BAAG,IAAI,IAAJ,EAAH,CAAR;;AADmB;AAAA;;AAEnB,QAAI,IAAI,CAAC,QAAL,OAAoB,CAAxB,EAA2B;AAAA;AAAA;AAAA;AACzB,MAAA,IAAI,GAAG,IAAI,IAAJ,CAAS,IAAI,CAAC,WAAL,KAAqB,CAA9B,EAAiC,EAAjC,EAAqC,IAAI,CAAC,OAAL,EAArC,CAAP;AACD,KAFD,MAEO;AAAA;AAAA;AAAA;AACL,MAAA,IAAI,GAAG,IAAI,IAAJ,CAAS,IAAI,CAAC,WAAL,EAAT,EAA6B,IAAI,CAAC,QAAL,KAAkB,CAA/C,EAAkD,IAAI,CAAC,OAAL,EAAlD,CAAP;AACD;;AANkB;AAAA;AAOnB,WAAO,KAAK,QAAL,CAAc,SAAd,CAAwB,IAAxB,EAA8B,KAAK,UAAnC,CAAP;AACD;;AAEO,EAAA,KAAK,GAAA;AAAA;AAAA;AACX;AACA,UAAM,IAAI;AAAA;AAAA,+BAAG,IAAI,IAAJ,EAAH,CAAV;;AAFW;AAAA;AAGX,IAAA,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,OAAL,KAAiB,CAA9B;;AAHW;AAAA;AAIX,WAAO,KAAK,QAAL,CAAc,SAAd,CAAwB,IAAxB,EAA8B,KAAK,UAAnC,CAAP;AACD;;AAEO,EAAA,gBAAgB,GAAA;AAAA;AAAA;AAAA;AACtB,IAAA,MAAA,CAAA,aAAA,CAAc,KAAK,cAAL,CAAoB,IAAlC,EAAwC,KAAK,cAAL,CAAoB,aAA5D,EAA2E,CAAC,IAAD,EAAa,MAAb,KAAiC;AAAA;AAAA;;;;AAC1G,YAAM,IAAI;AAAA;AAAA,iCAAG,MAAM,CAAC,GAAP,CAAW,MAAX,CAAH,CAAV;;AAD0G;AAAA;AAE1G,WAAK,IAAL,GAAY,IAAI,KAAK,IAAT;AAAA;AAAA,mCAAgB,CAAC,IAAjB;AAAA;AAAA,mCAAwB,CAAxB,CAAZ;AACA,YAAM,IAAI;AAAA;AAAA,iCAAG;AAAA;AAAA,oCAAA,EAAA,GAAC,MAAM,CAAC,GAAP,CAAW,MAAX,CAAD,MAAmB,IAAnB;AAAA;AAAA,mCAAmB,EAAA,KAAA,KAAA,CAAnB;AAAA;AAAA,mCAAmB,EAAnB;AAAA;AAAA,mCAAuB,IAAI,CAAC,aAAD,CAA3B,CAAA,EAA4C,KAA5C,CAAkD,GAAlD,CAAH,CAAV;;AAH0G;AAAA;AAI1G,WAAK,SAAL,GAAiB,IAAI,CAAC,CAAD,CAArB;;AAJ0G;AAAA;AAK1G,WAAK,SAAL,GAAiB,IAAI,CAAC,CAAD,CAAJ,KAAY,KAA7B;;AAL0G;AAAA;;AAM1G,UAAI,MAAM,CAAC,GAAP,CAAW,MAAX,CAAJ,EAAwB;AAAA;AAAA;AAAA;AACtB,aAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,SAAd,CAAwB,MAAM,CAAC,GAAP,CAAW,MAAX,CAAxB,EAA4C,KAAK,UAAjD,CAAhB;AACD,OAFD;AAAA;AAAA;AAAA;AAAA;;AAN0G;;AAS1G,UAAI,MAAM,CAAC,GAAP,CAAW,IAAX,CAAJ,EAAsB;AAAA;AAAA;AAAA;AACpB,aAAK,MAAL,GAAc,KAAK,QAAL,CAAc,SAAd,CAAwB,MAAM,CAAC,GAAP,CAAW,IAAX,CAAxB,EAA0C,KAAK,UAA/C,CAAd;AACD,OAFD;AAAA;AAAA;AAAA;AAAA;;AAT0G;AAY1G,WAAK,QAAL;AACD,KAbD,EAaG,SAbH;AAcD;;AAEO,EAAA,QAAQ,GAAA;AAAA;AAAA;AAAA;AACd,SAAK,aAAL,CACG,KADH,CACS;AACL,MAAA,IAAI,EAAE,KAAK,IAAL,GAAY,CADb;AAEL,MAAA,IAAI,EAAE,KAAK,YAFN;AAGL,MAAA,IAAI,EAAE,KAAK,IAAL,EAHD;AAIL,MAAA,QAAQ,EAAE,KAAK,QAJV;AAKL,MAAA,MAAM,EAAE,KAAK;AALR,KADT,EAQG,SARH,CAQc,GAAD,IAAgC;AAAA;AAAA;AAAA;AAAA,kBAAK,SAAL,CAAe,GAAG,CAAC,IAAnB,EAAyB,GAAG,CAAC,OAA7B;AAAqC,KARlF;AASD;;AAEO,EAAA,IAAI,GAAA;AAAA;AAAA;AACV,UAAM,MAAM;AAAA;AAAA,+BAAG,CAAC,KAAK,SAAL,GAAiB,GAAjB,IAAwB,KAAK,SAAL;AAAA;AAAA,iCAAiB,KAAjB;AAAA;AAAA,iCAAyB,MAAzB,CAAxB,CAAD,CAAH,CAAZ;;AADU;AAAA;;AAEV,QAAI,KAAK,SAAL,KAAmB,IAAvB,EAA6B;AAAA;AAAA;AAAA;AAC3B,MAAA,MAAM,CAAC,IAAP,CAAY,IAAZ;AACD,KAFD;AAAA;AAAA;AAAA;AAAA;;AAFU;AAKV,WAAO,MAAP;AACD;;AAEO,EAAA,SAAS,CAAC,MAAD,EAAyB,OAAzB,EAA6C;AAAA;AAAA;AAAA;AAC5D,SAAK,UAAL,GAAkB,MAAM,CAAC,OAAO,CAAC,GAAR,CAAY,eAAZ,CAAD,CAAxB;;AAD4D;AAAA;AAE5D,SAAK,MAAL;AAAc;AAAA,kCAAA,MAAM;AAAA;AAAA,kCAAI,EAAJ,CAApB;AACD;;AAnGyB,CAA5B;;;;AAAa,eAAe,GAAA,OAAA,CAAA,UAAA,CAAA,CAJ3B,MAAA,CAAA,SAAA,CAAU;AACT,EAAA,QAAQ,EAAE,WADD;AAET,EAAA,QAAA,EAAA,OAAA,CAAa,yBAAb;AAFS,CAAV,CAI2B,E,yCAaD,gBAAA,CAAA,a,EACC,QAAA,CAAA,c,EACN,QAAA,CAAA,Q,EACF,QAAA,CAAA,M,EAhBQ,CAAA,EAAf,eAAe,CAAf;;;;AAAA,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { DatePipe } from '@angular/common';\nimport { ActivatedRoute, ParamMap, Router, Data } from '@angular/router';\nimport { combineLatest } from 'rxjs';\n\nimport { ITEMS_PER_PAGE } from 'app/shared/constants/pagination.constants';\nimport { Audit } from './audit.model';\nimport { AuditsService } from './audits.service';\n\n@Component({\n  selector: 'jhi-audit',\n  templateUrl: './audits.component.html',\n})\nexport class AuditsComponent implements OnInit {\n  audits?: Audit[];\n  fromDate = '';\n  itemsPerPage = ITEMS_PER_PAGE;\n  page!: number;\n  predicate!: string;\n  ascending!: boolean;\n  toDate = '';\n  totalItems = 0;\n\n  private dateFormat = 'yyyy-MM-dd';\n\n  constructor(\n    private auditsService: AuditsService,\n    private activatedRoute: ActivatedRoute,\n    private datePipe: DatePipe,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.toDate = this.today();\n    this.fromDate = this.previousMonth();\n    this.handleNavigation();\n  }\n\n  canLoad(): boolean {\n    return this.fromDate !== '' && this.toDate !== '';\n  }\n\n  transition(): void {\n    if (this.canLoad()) {\n      this.router.navigate(['/admin/audits'], {\n        queryParams: {\n          page: this.page,\n          sort: this.predicate + ',' + (this.ascending ? 'asc' : 'desc'),\n          from: this.fromDate,\n          to: this.toDate,\n        },\n      });\n    }\n  }\n\n  private previousMonth(): string {\n    let date = new Date();\n    if (date.getMonth() === 0) {\n      date = new Date(date.getFullYear() - 1, 11, date.getDate());\n    } else {\n      date = new Date(date.getFullYear(), date.getMonth() - 1, date.getDate());\n    }\n    return this.datePipe.transform(date, this.dateFormat)!;\n  }\n\n  private today(): string {\n    // Today + 1 day - needed if the current day must be included\n    const date = new Date();\n    date.setDate(date.getDate() + 1);\n    return this.datePipe.transform(date, this.dateFormat)!;\n  }\n\n  private handleNavigation(): void {\n    combineLatest(this.activatedRoute.data, this.activatedRoute.queryParamMap, (data: Data, params: ParamMap) => {\n      const page = params.get('page');\n      this.page = page !== null ? +page : 1;\n      const sort = (params.get('sort') ?? data['defaultSort']).split(',');\n      this.predicate = sort[0];\n      this.ascending = sort[1] === 'asc';\n      if (params.get('from')) {\n        this.fromDate = this.datePipe.transform(params.get('from'), this.dateFormat)!;\n      }\n      if (params.get('to')) {\n        this.toDate = this.datePipe.transform(params.get('to'), this.dateFormat)!;\n      }\n      this.loadData();\n    }).subscribe();\n  }\n\n  private loadData(): void {\n    this.auditsService\n      .query({\n        page: this.page - 1,\n        size: this.itemsPerPage,\n        sort: this.sort(),\n        fromDate: this.fromDate,\n        toDate: this.toDate,\n      })\n      .subscribe((res: HttpResponse<Audit[]>) => this.onSuccess(res.body, res.headers));\n  }\n\n  private sort(): string[] {\n    const result = [this.predicate + ',' + (this.ascending ? 'asc' : 'desc')];\n    if (this.predicate !== 'id') {\n      result.push('id');\n    }\n    return result;\n  }\n\n  private onSuccess(audits: Audit[] | null, headers: HttpHeaders): void {\n    this.totalItems = Number(headers.get('X-Total-Count'));\n    this.audits = audits || [];\n  }\n}\n"]}