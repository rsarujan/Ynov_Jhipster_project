{"version":3,"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/main/webapp/app/core/auth/account.service.ts"],"names":[],"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { JhiLanguageService } from 'ng-jhipster';\nimport { SessionStorageService } from 'ngx-webstorage';\nimport { Observable, ReplaySubject, of } from 'rxjs';\nimport { shareReplay, tap, catchError } from 'rxjs/operators';\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { Account } from 'app/core/user/account.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n  private userIdentity: Account | null = null;\n  private authenticationState = new ReplaySubject<Account | null>(1);\n  private accountCache$?: Observable<Account | null>;\n\n  constructor(\n    private languageService: JhiLanguageService,\n    private sessionStorage: SessionStorageService,\n    private http: HttpClient,\n    private stateStorageService: StateStorageService,\n    private router: Router\n  ) {}\n\n  save(account: Account): Observable<{}> {\n    return this.http.post(SERVER_API_URL + 'api/account', account);\n  }\n\n  authenticate(identity: Account | null): void {\n    this.userIdentity = identity;\n    this.authenticationState.next(this.userIdentity);\n  }\n\n  hasAnyAuthority(authorities: string[] | string): boolean {\n    if (!this.userIdentity || !this.userIdentity.authorities) {\n      return false;\n    }\n    if (!Array.isArray(authorities)) {\n      authorities = [authorities];\n    }\n    return this.userIdentity.authorities.some((authority: string) => authorities.includes(authority));\n  }\n\n  identity(force?: boolean): Observable<Account | null> {\n    if (!this.accountCache$ || force || !this.isAuthenticated()) {\n      this.accountCache$ = this.fetch().pipe(\n        catchError(() => {\n          return of(null);\n        }),\n        tap((account: Account | null) => {\n          this.authenticate(account);\n\n          // After retrieve the account info, the language will be changed to\n          // the user's preferred language configured in the account setting\n          if (account && account.langKey) {\n            const langKey = this.sessionStorage.retrieve('locale') || account.langKey;\n            this.languageService.changeLanguage(langKey);\n          }\n\n          if (account) {\n            this.navigateToStoredUrl();\n          }\n        }),\n        shareReplay()\n      );\n    }\n    return this.accountCache$;\n  }\n\n  isAuthenticated(): boolean {\n    return this.userIdentity !== null;\n  }\n\n  getAuthenticationState(): Observable<Account | null> {\n    return this.authenticationState.asObservable();\n  }\n\n  getImageUrl(): string {\n    return this.userIdentity ? this.userIdentity.imageUrl : '';\n  }\n\n  private fetch(): Observable<Account> {\n    return this.http.get<Account>(SERVER_API_URL + 'api/account');\n  }\n\n  private navigateToStoredUrl(): void {\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n    // if login is successful, go to stored previousState and clear previousState\n    const previousUrl = this.stateStorageService.getUrl();\n    if (previousUrl) {\n      this.stateStorageService.clearUrl();\n      this.router.navigateByUrl(previousUrl);\n    }\n  }\n}\n"]}