{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/admin/audits/audits.service.spec.ts","mappings":"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","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/admin/audits/audits.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { AuditsService, AuditsQuery } from 'app/admin/audits/audits.service';\nimport { Audit } from 'app/admin/audits/audit.model';\nimport { SERVER_API_URL } from 'app/app.constants';\n\ndescribe('Service Tests', () => {\n  describe('Audits Service', () => {\n    let service: AuditsService;\n    let httpMock: HttpTestingController;\n    const fakeRequest: AuditsQuery = { page: 0, size: 0, sort: [], fromDate: '', toDate: '' };\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n      });\n\n      service = TestBed.get(AuditsService);\n      httpMock = TestBed.get(HttpTestingController);\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n\n    describe('Service methods', () => {\n      it('should call correct URL', () => {\n        service.query(fakeRequest).subscribe();\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        const resourceUrl = SERVER_API_URL + 'management/audits';\n        expect(req.request.url).toEqual(resourceUrl);\n      });\n\n      it('should return Audits', () => {\n        let expectedResult: HttpResponse<Audit[]> = new HttpResponse({ body: [] });\n        const audit = new Audit({ remoteAddress: '127.0.0.1', sessionId: '123' }, 'user', '20140101', 'AUTHENTICATION_SUCCESS');\n\n        service.query(fakeRequest).subscribe(received => {\n          expectedResult = received;\n        });\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush([audit]);\n        let audits: Audit[] = [];\n        if (expectedResult.body !== null) {\n          audits = expectedResult.body;\n        }\n        expect(audits.length).toBe(1);\n        expect(audits[0]).toEqual(audit);\n      });\n\n      it('should propagate not found response', () => {\n        let expectedResult = 0;\n        service.query(fakeRequest).subscribe(null, (error: HttpErrorResponse) => {\n          expectedResult = error.status;\n        });\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush('Invalid request parameters', {\n          status: 404,\n          statusText: 'Bad Request',\n        });\n        expect(expectedResult).toEqual(404);\n      });\n    });\n  });\n});\n"],"version":3}