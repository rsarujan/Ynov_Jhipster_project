{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/account/password-reset/init/password-reset-init.component.spec.ts","mappings":";;AAAA,wCAA2C;AAC3C,mDAA0E;AAC1E,0CAA6C;AAC7C,+BAAsC;AAEtC,yDAA8D;AAC9D,iHAA2G;AAC3G,6GAAuG;AAEvG,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,IAAI,OAAqD,CAAC;QAC1D,IAAI,IAAgC,CAAC;QAErC,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,GAAG,iBAAO,CAAC,sBAAsB,CAAC;gBACvC,OAAO,EAAE,CAAC,iCAAmB,CAAC;gBAC9B,YAAY,EAAE,CAAC,0DAA0B,CAAC;gBAC1C,SAAS,EAAE,CAAC,mBAAW,CAAC;aACzB,CAAC;iBACC,gBAAgB,CAAC,0DAA0B,EAAE,EAAE,CAAC;iBAChD,eAAe,CAAC,0DAA0B,CAAC,CAAC;YAC/C,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,IAAI,GAAG;gBACX,KAAK,KAAU,CAAC;aACjB,CAAC;YACF,IAAI,CAAC,KAAK,GAAG,IAAI,iBAAU,CAAC,IAAI,CAAC,CAAC;YAClC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAErB,IAAI,CAAC,eAAe,EAAE,CAAC;YAEvB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,gBAAM,CAAC,CAAC,sDAAwB,CAAC,EAAE,CAAC,OAAiC,EAAE,EAAE;YAC9H,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC;gBAC/B,KAAK,EAAE,iBAAiB;aACzB,CAAC,CAAC;YAEH,IAAI,CAAC,YAAY,EAAE,CAAC;YAEpB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;YAC7D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC,CAAC;QAEJ,EAAE,CAAC,gDAAgD,EAAE,gBAAM,CAAC,CAAC,sDAAwB,CAAC,EAAE,CAAC,OAAiC,EAAE,EAAE;YAC5H,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,WAAW,CACpC,iBAAU,CAAC;gBACT,MAAM,EAAE,GAAG;gBACX,IAAI,EAAE,gBAAgB;aACvB,CAAC,CACH,CAAC;YACF,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC;gBAC/B,KAAK,EAAE,iBAAiB;aACzB,CAAC,CAAC;YACH,IAAI,CAAC,YAAY,EAAE,CAAC;YAEpB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;YAC7D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/account/password-reset/init/password-reset-init.component.spec.ts"],"sourcesContent":["import { ElementRef } from '@angular/core';\nimport { ComponentFixture, TestBed, inject } from '@angular/core/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { of, throwError } from 'rxjs';\n\nimport { ProBiblioTestModule } from '../../../../test.module';\nimport { PasswordResetInitComponent } from 'app/account/password-reset/init/password-reset-init.component';\nimport { PasswordResetInitService } from 'app/account/password-reset/init/password-reset-init.service';\n\ndescribe('Component Tests', () => {\n  describe('PasswordResetInitComponent', () => {\n    let fixture: ComponentFixture<PasswordResetInitComponent>;\n    let comp: PasswordResetInitComponent;\n\n    beforeEach(() => {\n      fixture = TestBed.configureTestingModule({\n        imports: [ProBiblioTestModule],\n        declarations: [PasswordResetInitComponent],\n        providers: [FormBuilder],\n      })\n        .overrideTemplate(PasswordResetInitComponent, '')\n        .createComponent(PasswordResetInitComponent);\n      comp = fixture.componentInstance;\n    });\n\n    it('sets focus after the view has been initialized', () => {\n      const node = {\n        focus(): void {},\n      };\n      comp.email = new ElementRef(node);\n      spyOn(node, 'focus');\n\n      comp.ngAfterViewInit();\n\n      expect(node.focus).toHaveBeenCalled();\n    });\n\n    it('notifies of success upon successful requestReset', inject([PasswordResetInitService], (service: PasswordResetInitService) => {\n      spyOn(service, 'save').and.returnValue(of({}));\n      comp.resetRequestForm.patchValue({\n        email: 'user@domain.com',\n      });\n\n      comp.requestReset();\n\n      expect(service.save).toHaveBeenCalledWith('user@domain.com');\n      expect(comp.success).toBe(true);\n    }));\n\n    it('no notification of success upon error response', inject([PasswordResetInitService], (service: PasswordResetInitService) => {\n      spyOn(service, 'save').and.returnValue(\n        throwError({\n          status: 503,\n          data: 'something else',\n        })\n      );\n      comp.resetRequestForm.patchValue({\n        email: 'user@domain.com',\n      });\n      comp.requestReset();\n\n      expect(service.save).toHaveBeenCalledWith('user@domain.com');\n      expect(comp.success).toBe(false);\n    }));\n  });\n});\n"],"version":3}