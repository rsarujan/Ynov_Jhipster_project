{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/account/activate/activate.component.spec.ts","mappings":";;AAAA,mDAAgF;AAChF,4CAAiD;AACjD,+BAAsC;AAEtC,sDAA2D;AAC3D,4EAAyE;AACzE,4EAAwE;AACxE,gFAA4E;AAE5E,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAI,IAAuB,CAAC;QAE5B,UAAU,CAAC,eAAK,CAAC,GAAG,EAAE;YACpB,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,OAAO,EAAE,CAAC,iCAAmB,CAAC;gBAC9B,YAAY,EAAE,CAAC,sCAAiB,CAAC;gBACjC,SAAS,EAAE;oBACT;wBACE,OAAO,EAAE,uBAAc;wBACvB,QAAQ,EAAE,IAAI,uCAAkB,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC;qBACpD;iBACF;aACF,CAAC;iBACC,gBAAgB,CAAC,sCAAiB,EAAE,EAAE,CAAC;iBACvC,iBAAiB,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC,CAAC;QAEJ,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,sCAAiB,CAAC,CAAC;YAC3D,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,gBAAM,CACtD,CAAC,kCAAe,CAAC,EACjB,mBAAS,CAAC,CAAC,OAAwB,EAAE,EAAE;YACrC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,EAAE,CAAC,CAAC;YAE5C,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,cAAI,EAAE,CAAC;YAEP,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACrD,CAAC,CAAC,CACH,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,gBAAM,CACpE,CAAC,kCAAe,CAAC,EACjB,mBAAS,CAAC,CAAC,OAAwB,EAAE,EAAE;YACrC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAE9C,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,cAAI,EAAE,CAAC;YAEP,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CACH,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,gBAAM,CAC/D,CAAC,kCAAe,CAAC,EACjB,mBAAS,CAAC,CAAC,OAAwB,EAAE,EAAE;YACrC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YAE3D,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,cAAI,EAAE,CAAC;YAEP,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CACH,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/account/activate/activate.component.spec.ts"],"sourcesContent":["import { TestBed, async, tick, fakeAsync, inject } from '@angular/core/testing';\nimport { ActivatedRoute } from '@angular/router';\nimport { of, throwError } from 'rxjs';\n\nimport { ProBiblioTestModule } from '../../../test.module';\nimport { MockActivatedRoute } from '../../../helpers/mock-route.service';\nimport { ActivateService } from 'app/account/activate/activate.service';\nimport { ActivateComponent } from 'app/account/activate/activate.component';\n\ndescribe('Component Tests', () => {\n  describe('ActivateComponent', () => {\n    let comp: ActivateComponent;\n\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [ProBiblioTestModule],\n        declarations: [ActivateComponent],\n        providers: [\n          {\n            provide: ActivatedRoute,\n            useValue: new MockActivatedRoute({ key: 'ABC123' }),\n          },\n        ],\n      })\n        .overrideTemplate(ActivateComponent, '')\n        .compileComponents();\n    }));\n\n    beforeEach(() => {\n      const fixture = TestBed.createComponent(ActivateComponent);\n      comp = fixture.componentInstance;\n    });\n\n    it('calls activate.get with the key from params', inject(\n      [ActivateService],\n      fakeAsync((service: ActivateService) => {\n        spyOn(service, 'get').and.returnValue(of());\n\n        comp.ngOnInit();\n        tick();\n\n        expect(service.get).toHaveBeenCalledWith('ABC123');\n      })\n    ));\n\n    it('should set set success to true upon successful activation', inject(\n      [ActivateService],\n      fakeAsync((service: ActivateService) => {\n        spyOn(service, 'get').and.returnValue(of({}));\n\n        comp.ngOnInit();\n        tick();\n\n        expect(comp.error).toBe(false);\n        expect(comp.success).toBe(true);\n      })\n    ));\n\n    it('should set set error to true upon activation failure', inject(\n      [ActivateService],\n      fakeAsync((service: ActivateService) => {\n        spyOn(service, 'get').and.returnValue(throwError('ERROR'));\n\n        comp.ngOnInit();\n        tick();\n\n        expect(comp.error).toBe(true);\n        expect(comp.success).toBe(false);\n      })\n    ));\n  });\n});\n"],"version":3}