e1d857c5ff813266d9ceb0a23eedc3a6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const metrics_service_1 = require("app/admin/metrics/metrics.service");
const app_constants_1 = require("app/app.constants");
describe('Service Tests', () => {
    describe('Logs Service', () => {
        let service;
        let httpMock;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            service = testing_1.TestBed.get(metrics_service_1.MetricsService);
            httpMock = testing_1.TestBed.get(testing_2.HttpTestingController);
        });
        afterEach(() => {
            httpMock.verify();
        });
        describe('Service methods', () => {
            it('should call correct URL', () => {
                service.getMetrics().subscribe();
                const req = httpMock.expectOne({ method: 'GET' });
                const resourceUrl = app_constants_1.SERVER_API_URL + 'management/jhimetrics';
                expect(req.request.url).toEqual(resourceUrl);
            });
            it('should return Metrics', () => {
                let expectedResult = null;
                const metrics = {
                    jvm: {},
                    'http.server.requests': {},
                    cache: {},
                    services: {},
                    databases: {},
                    garbageCollector: {},
                    processMetrics: {},
                };
                service.getMetrics().subscribe(received => {
                    expectedResult = received;
                });
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(metrics);
                expect(expectedResult).toEqual(metrics);
            });
            it('should return Thread Dump', () => {
                let expectedResult = null;
                const dump = { threads: [{ name: 'test1', threadState: 'RUNNABLE' }] };
                service.threadDump().subscribe(received => {
                    expectedResult = received;
                });
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(dump);
                expect(expectedResult).toEqual(dump);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3NhcnVqYW5yYWphcmF0bmFtL0Rlc2t0b3AvWW5vdi9ZTk9WX1BST0pFVF9CSUJMSU9USEVRVUVfQ0xFTUVOQ0VfU0FSVUpBTi9Zbm92X1RFU1RfUHJvamV0L3NyYy90ZXN0L2phdmFzY3JpcHQvc3BlYy9hcHAvYWRtaW4vbWV0cmljcy9tZXRyaWNzLnNlcnZpY2Uuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFnRDtBQUNoRCwwREFBOEY7QUFFOUYsdUVBQXdGO0FBQ3hGLHFEQUFtRDtBQUVuRCxRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtJQUM3QixRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixJQUFJLE9BQXVCLENBQUM7UUFDNUIsSUFBSSxRQUErQixDQUFDO1FBRXBDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QixPQUFPLEVBQUUsQ0FBQyxpQ0FBdUIsQ0FBQzthQUNuQyxDQUFDLENBQUM7WUFDSCxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWMsQ0FBQyxDQUFDO1lBQ3RDLFFBQVEsR0FBRyxpQkFBTyxDQUFDLEdBQUcsQ0FBQywrQkFBcUIsQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDO1FBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNiLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7WUFDL0IsRUFBRSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtnQkFDakMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUVqQyxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBQ2xELE1BQU0sV0FBVyxHQUFHLDhCQUFjLEdBQUcsdUJBQXVCLENBQUM7Z0JBQzdELE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMvQyxDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7Z0JBQy9CLElBQUksY0FBYyxHQUFtQixJQUFJLENBQUM7Z0JBQzFDLE1BQU0sT0FBTyxHQUFZO29CQUN2QixHQUFHLEVBQUUsRUFBRTtvQkFDUCxzQkFBc0IsRUFBRSxFQUFFO29CQUMxQixLQUFLLEVBQUUsRUFBRTtvQkFDVCxRQUFRLEVBQUUsRUFBRTtvQkFDWixTQUFTLEVBQUUsRUFBRTtvQkFDYixnQkFBZ0IsRUFBRSxFQUFFO29CQUNwQixjQUFjLEVBQUUsRUFBRTtpQkFDbkIsQ0FBQztnQkFFRixPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUN4QyxjQUFjLEdBQUcsUUFBUSxDQUFDO2dCQUM1QixDQUFDLENBQUMsQ0FBQztnQkFFSCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBQ2xELEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ25CLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUMsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO2dCQUNuQyxJQUFJLGNBQWMsR0FBc0IsSUFBSSxDQUFDO2dCQUM3QyxNQUFNLElBQUksR0FBZSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUVuRixPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUN4QyxjQUFjLEdBQUcsUUFBUSxDQUFDO2dCQUM1QixDQUFDLENBQUMsQ0FBQztnQkFFSCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBQ2xELEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hCLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3NhcnVqYW5yYWphcmF0bmFtL0Rlc2t0b3AvWW5vdi9ZTk9WX1BST0pFVF9CSUJMSU9USEVRVUVfQ0xFTUVOQ0VfU0FSVUpBTi9Zbm92X1RFU1RfUHJvamV0L3NyYy90ZXN0L2phdmFzY3JpcHQvc3BlYy9hcHAvYWRtaW4vbWV0cmljcy9tZXRyaWNzLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEh0dHBDbGllbnRUZXN0aW5nTW9kdWxlLCBIdHRwVGVzdGluZ0NvbnRyb2xsZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cC90ZXN0aW5nJztcblxuaW1wb3J0IHsgTWV0cmljc1NlcnZpY2UsIE1ldHJpY3MsIFRocmVhZER1bXAgfSBmcm9tICdhcHAvYWRtaW4vbWV0cmljcy9tZXRyaWNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU0VSVkVSX0FQSV9VUkwgfSBmcm9tICdhcHAvYXBwLmNvbnN0YW50cyc7XG5cbmRlc2NyaWJlKCdTZXJ2aWNlIFRlc3RzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnTG9ncyBTZXJ2aWNlJywgKCkgPT4ge1xuICAgIGxldCBzZXJ2aWNlOiBNZXRyaWNzU2VydmljZTtcbiAgICBsZXQgaHR0cE1vY2s6IEh0dHBUZXN0aW5nQ29udHJvbGxlcjtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgICAgaW1wb3J0czogW0h0dHBDbGllbnRUZXN0aW5nTW9kdWxlXSxcbiAgICAgIH0pO1xuICAgICAgc2VydmljZSA9IFRlc3RCZWQuZ2V0KE1ldHJpY3NTZXJ2aWNlKTtcbiAgICAgIGh0dHBNb2NrID0gVGVzdEJlZC5nZXQoSHR0cFRlc3RpbmdDb250cm9sbGVyKTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICBodHRwTW9jay52ZXJpZnkoKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdTZXJ2aWNlIG1ldGhvZHMnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNhbGwgY29ycmVjdCBVUkwnLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2UuZ2V0TWV0cmljcygpLnN1YnNjcmliZSgpO1xuXG4gICAgICAgIGNvbnN0IHJlcSA9IGh0dHBNb2NrLmV4cGVjdE9uZSh7IG1ldGhvZDogJ0dFVCcgfSk7XG4gICAgICAgIGNvbnN0IHJlc291cmNlVXJsID0gU0VSVkVSX0FQSV9VUkwgKyAnbWFuYWdlbWVudC9qaGltZXRyaWNzJztcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0LnVybCkudG9FcXVhbChyZXNvdXJjZVVybCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gTWV0cmljcycsICgpID0+IHtcbiAgICAgICAgbGV0IGV4cGVjdGVkUmVzdWx0OiBNZXRyaWNzIHwgbnVsbCA9IG51bGw7XG4gICAgICAgIGNvbnN0IG1ldHJpY3M6IE1ldHJpY3MgPSB7XG4gICAgICAgICAganZtOiB7fSxcbiAgICAgICAgICAnaHR0cC5zZXJ2ZXIucmVxdWVzdHMnOiB7fSxcbiAgICAgICAgICBjYWNoZToge30sXG4gICAgICAgICAgc2VydmljZXM6IHt9LFxuICAgICAgICAgIGRhdGFiYXNlczoge30sXG4gICAgICAgICAgZ2FyYmFnZUNvbGxlY3Rvcjoge30sXG4gICAgICAgICAgcHJvY2Vzc01ldHJpY3M6IHt9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHNlcnZpY2UuZ2V0TWV0cmljcygpLnN1YnNjcmliZShyZWNlaXZlZCA9PiB7XG4gICAgICAgICAgZXhwZWN0ZWRSZXN1bHQgPSByZWNlaXZlZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKHsgbWV0aG9kOiAnR0VUJyB9KTtcbiAgICAgICAgcmVxLmZsdXNoKG1ldHJpY3MpO1xuICAgICAgICBleHBlY3QoZXhwZWN0ZWRSZXN1bHQpLnRvRXF1YWwobWV0cmljcyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gVGhyZWFkIER1bXAnLCAoKSA9PiB7XG4gICAgICAgIGxldCBleHBlY3RlZFJlc3VsdDogVGhyZWFkRHVtcCB8IG51bGwgPSBudWxsO1xuICAgICAgICBjb25zdCBkdW1wOiBUaHJlYWREdW1wID0geyB0aHJlYWRzOiBbeyBuYW1lOiAndGVzdDEnLCB0aHJlYWRTdGF0ZTogJ1JVTk5BQkxFJyB9XSB9O1xuXG4gICAgICAgIHNlcnZpY2UudGhyZWFkRHVtcCgpLnN1YnNjcmliZShyZWNlaXZlZCA9PiB7XG4gICAgICAgICAgZXhwZWN0ZWRSZXN1bHQgPSByZWNlaXZlZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKHsgbWV0aG9kOiAnR0VUJyB9KTtcbiAgICAgICAgcmVxLmZsdXNoKGR1bXApO1xuICAgICAgICBleHBlY3QoZXhwZWN0ZWRSZXN1bHQpLnRvRXF1YWwoZHVtcCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==