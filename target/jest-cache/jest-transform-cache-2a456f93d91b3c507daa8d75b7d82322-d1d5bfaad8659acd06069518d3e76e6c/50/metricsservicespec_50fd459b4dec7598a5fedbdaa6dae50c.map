{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/admin/metrics/metrics.service.spec.ts","mappings":";;AAAA,mDAAgD;AAChD,0DAA8F;AAE9F,uEAAwF;AACxF,qDAAmD;AAEnD,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,IAAI,OAAuB,CAAC;QAC5B,IAAI,QAA+B,CAAC;QAEpC,UAAU,CAAC,GAAG,EAAE;YACd,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;aACnC,CAAC,CAAC;YACH,OAAO,GAAG,iBAAO,CAAC,GAAG,CAAC,gCAAc,CAAC,CAAC;YACtC,QAAQ,GAAG,iBAAO,CAAC,GAAG,CAAC,+BAAqB,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,QAAQ,CAAC,MAAM,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC/B,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;gBACjC,OAAO,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC;gBAEjC,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;gBAClD,MAAM,WAAW,GAAG,8BAAc,GAAG,uBAAuB,CAAC;gBAC7D,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;gBAC/B,IAAI,cAAc,GAAmB,IAAI,CAAC;gBAC1C,MAAM,OAAO,GAAY;oBACvB,GAAG,EAAE,EAAE;oBACP,sBAAsB,EAAE,EAAE;oBAC1B,KAAK,EAAE,EAAE;oBACT,QAAQ,EAAE,EAAE;oBACZ,SAAS,EAAE,EAAE;oBACb,gBAAgB,EAAE,EAAE;oBACpB,cAAc,EAAE,EAAE;iBACnB,CAAC;gBAEF,OAAO,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBACxC,cAAc,GAAG,QAAQ,CAAC;gBAC5B,CAAC,CAAC,CAAC;gBAEH,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;gBAClD,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACnB,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,IAAI,cAAc,GAAsB,IAAI,CAAC;gBAC7C,MAAM,IAAI,GAAe,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC;gBAEnF,OAAO,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBACxC,cAAc,GAAG,QAAQ,CAAC;gBAC5B,CAAC,CAAC,CAAC;gBAEH,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;gBAClD,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAChB,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/admin/metrics/metrics.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { MetricsService, Metrics, ThreadDump } from 'app/admin/metrics/metrics.service';\nimport { SERVER_API_URL } from 'app/app.constants';\n\ndescribe('Service Tests', () => {\n  describe('Logs Service', () => {\n    let service: MetricsService;\n    let httpMock: HttpTestingController;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n      });\n      service = TestBed.get(MetricsService);\n      httpMock = TestBed.get(HttpTestingController);\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n\n    describe('Service methods', () => {\n      it('should call correct URL', () => {\n        service.getMetrics().subscribe();\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        const resourceUrl = SERVER_API_URL + 'management/jhimetrics';\n        expect(req.request.url).toEqual(resourceUrl);\n      });\n\n      it('should return Metrics', () => {\n        let expectedResult: Metrics | null = null;\n        const metrics: Metrics = {\n          jvm: {},\n          'http.server.requests': {},\n          cache: {},\n          services: {},\n          databases: {},\n          garbageCollector: {},\n          processMetrics: {},\n        };\n\n        service.getMetrics().subscribe(received => {\n          expectedResult = received;\n        });\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush(metrics);\n        expect(expectedResult).toEqual(metrics);\n      });\n\n      it('should return Thread Dump', () => {\n        let expectedResult: ThreadDump | null = null;\n        const dump: ThreadDump = { threads: [{ name: 'test1', threadState: 'RUNNABLE' }] };\n\n        service.threadDump().subscribe(received => {\n          expectedResult = received;\n        });\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush(dump);\n        expect(expectedResult).toEqual(dump);\n      });\n    });\n  });\n});\n"],"version":3}