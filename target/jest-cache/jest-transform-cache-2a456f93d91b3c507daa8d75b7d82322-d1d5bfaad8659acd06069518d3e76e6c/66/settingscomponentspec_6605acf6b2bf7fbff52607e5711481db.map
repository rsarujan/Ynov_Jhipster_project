{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/account/settings/settings.component.spec.ts","mappings":"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","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/YNOV_PROJET_BIBLIOTHEQUE_CLEMENCE_SARUJAN/Ynov_TEST_Projet/src/test/javascript/spec/app/account/settings/settings.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, async } from '@angular/core/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { throwError, of } from 'rxjs';\n\nimport { ProBiblioTestModule } from '../../../test.module';\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/user/account.model';\nimport { SettingsComponent } from 'app/account/settings/settings.component';\nimport { MockAccountService } from '../../../helpers/mock-account.service';\n\ndescribe('Component Tests', () => {\n  describe('SettingsComponent', () => {\n    let comp: SettingsComponent;\n    let fixture: ComponentFixture<SettingsComponent>;\n    let mockAuth: MockAccountService;\n    const accountValues: Account = {\n      firstName: 'John',\n      lastName: 'Doe',\n      activated: true,\n      email: 'john.doe@mail.com',\n      langKey: 'fr',\n      login: 'john',\n      authorities: [],\n      imageUrl: '',\n    };\n\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [ProBiblioTestModule],\n        declarations: [SettingsComponent],\n        providers: [FormBuilder],\n      })\n        .overrideTemplate(SettingsComponent, '')\n        .compileComponents();\n    }));\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(SettingsComponent);\n      comp = fixture.componentInstance;\n      mockAuth = TestBed.get(AccountService);\n      mockAuth.setIdentityResponse(accountValues);\n    });\n\n    it('should send the current identity upon save', () => {\n      // GIVEN\n      mockAuth.saveSpy.and.returnValue(of({}));\n      const settingsFormValues = {\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john.doe@mail.com',\n        langKey: 'fr',\n      };\n\n      // WHEN\n      comp.ngOnInit();\n      comp.save();\n\n      // THEN\n      expect(mockAuth.identitySpy).toHaveBeenCalled();\n      expect(mockAuth.saveSpy).toHaveBeenCalledWith(accountValues);\n      expect(mockAuth.authenticateSpy).toHaveBeenCalledWith(accountValues);\n      expect(comp.settingsForm.value).toEqual(settingsFormValues);\n    });\n\n    it('should notify of success upon successful save', () => {\n      // GIVEN\n      mockAuth.saveSpy.and.returnValue(of({}));\n\n      // WHEN\n      comp.ngOnInit();\n      comp.save();\n\n      // THEN\n      expect(comp.success).toBe(true);\n    });\n\n    it('should notify of error upon failed save', () => {\n      // GIVEN\n      mockAuth.saveSpy.and.returnValue(throwError('ERROR'));\n\n      // WHEN\n      comp.ngOnInit();\n      comp.save();\n\n      // THEN\n      expect(comp.success).toBe(false);\n    });\n  });\n});\n"],"version":3}