7174dd2866cda5fe058b9966d56c32c7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const router_1 = require("@angular/router");
const platform_browser_1 = require("@angular/platform-browser");
const rxjs_1 = require("rxjs");
const core_1 = require("@ngx-translate/core");
const main_component_1 = require("app/layouts/main/main.component");
const test_module_1 = require("../../../test.module");
describe('Component Tests', () => {
    describe('MainComponent', () => {
        let comp;
        let fixture;
        let router;
        const routerEventsSubject = new rxjs_1.Subject();
        let titleService;
        let translateService;
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.ProBiblioTestModule, core_1.TranslateModule.forRoot()],
                declarations: [main_component_1.MainComponent],
                providers: [platform_browser_1.Title],
            })
                .overrideTemplate(main_component_1.MainComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(main_component_1.MainComponent);
            comp = fixture.componentInstance;
            router = testing_1.TestBed.get(router_1.Router);
            router.setEvents(routerEventsSubject.asObservable());
            titleService = testing_1.TestBed.get(platform_browser_1.Title);
            translateService = testing_1.TestBed.get(core_1.TranslateService);
        });
        describe('page title', () => {
            let routerState;
            const defaultPageTitle = 'global.title';
            const parentRoutePageTitle = 'parentTitle';
            const childRoutePageTitle = 'childTitle';
            const navigationEnd = new router_1.NavigationEnd(1, '', '');
            const langChangeEvent = { lang: 'fr', translations: null };
            beforeEach(() => {
                routerState = { snapshot: { root: {} } };
                router.setRouterState(routerState);
                spyOn(translateService, 'get').and.callFake((key) => {
                    return rxjs_1.of(key + ' translated');
                });
                translateService.currentLang = 'fr';
                spyOn(titleService, 'setTitle');
                comp.ngOnInit();
            });
            describe('navigation end', () => {
                it('should set page title to default title if pageTitle is missing on routes', () => {
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(defaultPageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(defaultPageTitle + ' translated');
                });
                it('should set page title to root route pageTitle if there is no child routes', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
                });
                it('should set page title to child route pageTitle if child routes exist and pageTitle is set for child route', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: { pageTitle: childRoutePageTitle } };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(childRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(childRoutePageTitle + ' translated');
                });
                it('should set page title to parent route pageTitle if child routes exists but pageTitle is not set for child route data', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: {} };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
                });
                it('should set page title to parent route pageTitle if child routes exists but data is not set for child route', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = {};
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
                });
            });
            describe('language change', () => {
                it('should set page title to default title if pageTitle is missing on routes', () => {
                    // WHEN
                    translateService.onLangChange.emit(langChangeEvent);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(defaultPageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(defaultPageTitle + ' translated');
                });
                it('should set page title to root route pageTitle if there is no child routes', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    // WHEN
                    translateService.onLangChange.emit(langChangeEvent);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
                });
                it('should set page title to child route pageTitle if child routes exist and pageTitle is set for child route', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: { pageTitle: childRoutePageTitle } };
                    // WHEN
                    translateService.onLangChange.emit(langChangeEvent);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(childRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(childRoutePageTitle + ' translated');
                });
                it('should set page title to parent route pageTitle if child routes exists but pageTitle is not set for child route data', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: {} };
                    // WHEN
                    translateService.onLangChange.emit(langChangeEvent);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
                });
                it('should set page title to parent route pageTitle if child routes exists but data is not set for child route', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = {};
                    // WHEN
                    translateService.onLangChange.emit(langChangeEvent);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,