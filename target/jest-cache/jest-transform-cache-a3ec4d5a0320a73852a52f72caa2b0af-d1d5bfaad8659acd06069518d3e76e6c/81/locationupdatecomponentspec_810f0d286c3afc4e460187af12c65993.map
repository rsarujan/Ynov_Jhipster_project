{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/test/javascript/spec/app/entities/location/location-update.component.spec.ts","mappings":";;AAAA,mDAAmF;AACnF,+CAAoD;AACpD,0CAA6C;AAC7C,+BAA0B;AAE1B,sDAA2D;AAC3D,+FAA0F;AAC1F,6EAAyE;AACzE,oEAA2D;AAE3D,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;QACpD,IAAI,IAA6B,CAAC;QAClC,IAAI,OAAkD,CAAC;QACvD,IAAI,OAAwB,CAAC;QAE7B,UAAU,CAAC,GAAG,EAAE;YACd,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,OAAO,EAAE,CAAC,iCAAmB,CAAC;gBAC9B,YAAY,EAAE,CAAC,mDAAuB,CAAC;gBACvC,SAAS,EAAE,CAAC,mBAAW,CAAC;aACzB,CAAC;iBACC,gBAAgB,CAAC,mDAAuB,EAAE,EAAE,CAAC;iBAC7C,iBAAiB,EAAE,CAAC;YAEvB,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,mDAAuB,CAAC,CAAC;YAC3D,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;YACjC,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,kCAAe,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;YACpB,EAAE,CAAC,wDAAwD,EAAE,mBAAS,CAAC,GAAG,EAAE;gBAC1E,QAAQ;gBACR,MAAM,MAAM,GAAG,IAAI,yBAAQ,CAAC,GAAG,CAAC,CAAC;gBACjC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,CAAC,IAAI,mBAAY,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjF,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACxB,OAAO;gBACP,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,cAAI,EAAE,CAAC,CAAC,iBAAiB;gBAEzB,OAAO;gBACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;gBACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,CAAC;YAEJ,EAAE,CAAC,mDAAmD,EAAE,mBAAS,CAAC,GAAG,EAAE;gBACrE,QAAQ;gBACR,MAAM,MAAM,GAAG,IAAI,yBAAQ,EAAE,CAAC;gBAC9B,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,CAAC,IAAI,mBAAY,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjF,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACxB,OAAO;gBACP,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,cAAI,EAAE,CAAC,CAAC,iBAAiB;gBAEzB,OAAO;gBACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;gBACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/test/javascript/spec/app/entities/location/location-update.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpResponse } from '@angular/common/http';\nimport { FormBuilder } from '@angular/forms';\nimport { of } from 'rxjs';\n\nimport { ProBiblioTestModule } from '../../../test.module';\nimport { LocationUpdateComponent } from 'app/entities/location/location-update.component';\nimport { LocationService } from 'app/entities/location/location.service';\nimport { Location } from 'app/shared/model/location.model';\n\ndescribe('Component Tests', () => {\n  describe('Location Management Update Component', () => {\n    let comp: LocationUpdateComponent;\n    let fixture: ComponentFixture<LocationUpdateComponent>;\n    let service: LocationService;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [ProBiblioTestModule],\n        declarations: [LocationUpdateComponent],\n        providers: [FormBuilder],\n      })\n        .overrideTemplate(LocationUpdateComponent, '')\n        .compileComponents();\n\n      fixture = TestBed.createComponent(LocationUpdateComponent);\n      comp = fixture.componentInstance;\n      service = fixture.debugElement.injector.get(LocationService);\n    });\n\n    describe('save', () => {\n      it('Should call update service on save for existing entity', fakeAsync(() => {\n        // GIVEN\n        const entity = new Location(123);\n        spyOn(service, 'update').and.returnValue(of(new HttpResponse({ body: entity })));\n        comp.updateForm(entity);\n        // WHEN\n        comp.save();\n        tick(); // simulate async\n\n        // THEN\n        expect(service.update).toHaveBeenCalledWith(entity);\n        expect(comp.isSaving).toEqual(false);\n      }));\n\n      it('Should call create service on save for new entity', fakeAsync(() => {\n        // GIVEN\n        const entity = new Location();\n        spyOn(service, 'create').and.returnValue(of(new HttpResponse({ body: entity })));\n        comp.updateForm(entity);\n        // WHEN\n        comp.save();\n        tick(); // simulate async\n\n        // THEN\n        expect(service.create).toHaveBeenCalledWith(entity);\n        expect(comp.isSaving).toEqual(false);\n      }));\n    });\n  });\n});\n"],"version":3}