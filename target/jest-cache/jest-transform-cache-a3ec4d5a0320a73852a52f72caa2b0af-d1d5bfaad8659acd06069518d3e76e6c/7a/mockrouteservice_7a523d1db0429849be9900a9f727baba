3ec287bd86549509dbaad54fcf889795
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRouter = exports.MockActivatedRoute = void 0;
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const spyobject_1 = require("./spyobject");
class MockActivatedRoute extends router_1.ActivatedRoute {
    constructor(parameters) {
        super();
        this.queryParamsSubject = new rxjs_1.ReplaySubject();
        this.paramSubject = new rxjs_1.ReplaySubject();
        this.dataSubject = new rxjs_1.ReplaySubject();
        this.queryParams = this.queryParamsSubject.asObservable();
        this.params = this.paramSubject.asObservable();
        this.data = this.dataSubject.asObservable();
        this.setParameters(parameters);
    }
    setParameters(parameters) {
        this.queryParamsSubject.next(parameters);
        this.paramSubject.next(parameters);
        this.dataSubject.next(Object.assign(Object.assign({}, parameters), { defaultSort: 'id,desc' }));
    }
}
exports.MockActivatedRoute = MockActivatedRoute;
class MockRouter extends spyobject_1.SpyObject {
    constructor() {
        super(router_1.Router);
        this.events = null;
        this.url = '';
        this.navigateSpy = this.spy('navigate');
        this.navigateByUrlSpy = this.spy('navigateByUrl');
    }
    setEvents(events) {
        this.events = events;
    }
    setRouterState(routerState) {
        this.routerState = routerState;
    }
}
exports.MockRouter = MockRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3NhcnVqYW5yYWphcmF0bmFtL0Rlc2t0b3AvWW5vdi9Zbm92X1RFU1RfUHJvamV0L3NyYy90ZXN0L2phdmFzY3JpcHQvc3BlYy9oZWxwZXJzL21vY2stcm91dGUuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7QUFDQSw0Q0FBb0Y7QUFDcEYsK0JBQWlEO0FBRWpELDJDQUF3QztBQUV4QyxNQUFhLGtCQUFtQixTQUFRLHVCQUFjO0lBS3BELFlBQVksVUFBa0I7UUFDNUIsS0FBSyxFQUFFLENBQUM7UUFMRix1QkFBa0IsR0FBRyxJQUFJLG9CQUFhLEVBQVUsQ0FBQztRQUNqRCxpQkFBWSxHQUFHLElBQUksb0JBQWEsRUFBVSxDQUFDO1FBQzNDLGdCQUFXLEdBQUcsSUFBSSxvQkFBYSxFQUFRLENBQUM7UUFJOUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDMUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQy9DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM1QyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxhQUFhLENBQUMsVUFBa0I7UUFDOUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksaUNBQ2hCLFVBQVUsS0FDYixXQUFXLEVBQUUsU0FBUyxJQUN0QixDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBckJELGdEQXFCQztBQUVELE1BQWEsVUFBVyxTQUFRLHFCQUFTO0lBT3ZDO1FBQ0UsS0FBSyxDQUFDLGVBQU0sQ0FBQyxDQUFDO1FBTGhCLFdBQU0sR0FBbUMsSUFBSSxDQUFDO1FBRTlDLFFBQUcsR0FBRyxFQUFFLENBQUM7UUFJUCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELFNBQVMsQ0FBQyxNQUErQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsY0FBYyxDQUFDLFdBQWdCO1FBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQ2pDLENBQUM7Q0FDRjtBQXBCRCxnQ0FvQkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3NhcnVqYW5yYWphcmF0bmFtL0Rlc2t0b3AvWW5vdi9Zbm92X1RFU1RfUHJvamV0L3NyYy90ZXN0L2phdmFzY3JpcHQvc3BlYy9oZWxwZXJzL21vY2stcm91dGUuc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3B5ID0gamFzbWluZS5TcHk7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyLCBSb3V0ZXJFdmVudCwgRGF0YSwgUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgU3B5T2JqZWN0IH0gZnJvbSAnLi9zcHlvYmplY3QnO1xuXG5leHBvcnQgY2xhc3MgTW9ja0FjdGl2YXRlZFJvdXRlIGV4dGVuZHMgQWN0aXZhdGVkUm91dGUge1xuICBwcml2YXRlIHF1ZXJ5UGFyYW1zU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PFBhcmFtcz4oKTtcbiAgcHJpdmF0ZSBwYXJhbVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxQYXJhbXM+KCk7XG4gIHByaXZhdGUgZGF0YVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxEYXRhPigpO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnM6IFBhcmFtcykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5xdWVyeVBhcmFtcyA9IHRoaXMucXVlcnlQYXJhbXNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMucGFyYW1zID0gdGhpcy5wYXJhbVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICB0aGlzLnNldFBhcmFtZXRlcnMocGFyYW1ldGVycyk7XG4gIH1cblxuICBzZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnM6IFBhcmFtcyk6IHZvaWQge1xuICAgIHRoaXMucXVlcnlQYXJhbXNTdWJqZWN0Lm5leHQocGFyYW1ldGVycyk7XG4gICAgdGhpcy5wYXJhbVN1YmplY3QubmV4dChwYXJhbWV0ZXJzKTtcbiAgICB0aGlzLmRhdGFTdWJqZWN0Lm5leHQoe1xuICAgICAgLi4ucGFyYW1ldGVycyxcbiAgICAgIGRlZmF1bHRTb3J0OiAnaWQsZGVzYycsXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1vY2tSb3V0ZXIgZXh0ZW5kcyBTcHlPYmplY3Qge1xuICBuYXZpZ2F0ZVNweTogU3B5O1xuICBuYXZpZ2F0ZUJ5VXJsU3B5OiBTcHk7XG4gIGV2ZW50czogT2JzZXJ2YWJsZTxSb3V0ZXJFdmVudD4gfCBudWxsID0gbnVsbDtcbiAgcm91dGVyU3RhdGU6IGFueTtcbiAgdXJsID0gJyc7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUm91dGVyKTtcbiAgICB0aGlzLm5hdmlnYXRlU3B5ID0gdGhpcy5zcHkoJ25hdmlnYXRlJyk7XG4gICAgdGhpcy5uYXZpZ2F0ZUJ5VXJsU3B5ID0gdGhpcy5zcHkoJ25hdmlnYXRlQnlVcmwnKTtcbiAgfVxuXG4gIHNldEV2ZW50cyhldmVudHM6IE9ic2VydmFibGU8Um91dGVyRXZlbnQ+KTogdm9pZCB7XG4gICAgdGhpcy5ldmVudHMgPSBldmVudHM7XG4gIH1cblxuICBzZXRSb3V0ZXJTdGF0ZShyb3V0ZXJTdGF0ZTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5yb3V0ZXJTdGF0ZSA9IHJvdXRlclN0YXRlO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=