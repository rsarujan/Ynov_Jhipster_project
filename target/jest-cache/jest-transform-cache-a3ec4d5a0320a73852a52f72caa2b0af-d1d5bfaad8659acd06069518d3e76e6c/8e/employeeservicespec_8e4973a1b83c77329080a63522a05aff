3cdbd4b2e0b98c0d97cf92fa541664ef
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const moment = require("moment");
const input_constants_1 = require("app/shared/constants/input.constants");
const employee_service_1 = require("app/entities/employee/employee.service");
const employee_model_1 = require("app/shared/model/employee.model");
describe('Service Tests', () => {
    describe('Employee Service', () => {
        let injector;
        let service;
        let httpMock;
        let elemDefault;
        let expectedResult;
        let currentDate;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            expectedResult = null;
            injector = testing_1.getTestBed();
            service = injector.get(employee_service_1.EmployeeService);
            httpMock = injector.get(testing_2.HttpTestingController);
            currentDate = moment();
            elemDefault = new employee_model_1.Employee(0, 'AAAAAAA', 'AAAAAAA', 'AAAAAAA', 'AAAAAAA', currentDate, 0, 0);
        });
        describe('Service methods', () => {
            it('should find an element', () => {
                const returnedFromService = Object.assign({
                    hireDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                }, elemDefault);
                service.find(123).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(elemDefault);
            });
            it('should create a Employee', () => {
                const returnedFromService = Object.assign({
                    id: 0,
                    hireDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                }, elemDefault);
                const expected = Object.assign({
                    hireDate: currentDate,
                }, returnedFromService);
                service.create(new employee_model_1.Employee()).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'POST' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should update a Employee', () => {
                const returnedFromService = Object.assign({
                    firstName: 'BBBBBB',
                    lastName: 'BBBBBB',
                    email: 'BBBBBB',
                    phoneNumber: 'BBBBBB',
                    hireDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    salary: 1,
                    commissionPct: 1,
                }, elemDefault);
                const expected = Object.assign({
                    hireDate: currentDate,
                }, returnedFromService);
                service.update(expected).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'PUT' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should return a list of Employee', () => {
                const returnedFromService = Object.assign({
                    firstName: 'BBBBBB',
                    lastName: 'BBBBBB',
                    email: 'BBBBBB',
                    phoneNumber: 'BBBBBB',
                    hireDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    salary: 1,
                    commissionPct: 1,
                }, elemDefault);
                const expected = Object.assign({
                    hireDate: currentDate,
                }, returnedFromService);
                service.query().subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush([returnedFromService]);
                httpMock.verify();
                expect(expectedResult).toContainEqual(expected);
            });
            it('should delete a Employee', () => {
                service.delete(123).subscribe(resp => (expectedResult = resp.ok));
                const req = httpMock.expectOne({ method: 'DELETE' });
                req.flush({ status: 200 });
                expect(expectedResult);
            });
        });
        afterEach(() => {
            httpMock.verify();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,