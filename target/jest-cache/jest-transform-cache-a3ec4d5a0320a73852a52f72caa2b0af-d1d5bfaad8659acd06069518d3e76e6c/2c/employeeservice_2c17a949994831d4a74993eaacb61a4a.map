{"version":3,"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/main/webapp/app/entities/employee/employee.service.ts"],"names":[],"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as moment from 'moment';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared/util/request-util';\nimport { IEmployee } from 'app/shared/model/employee.model';\n\ntype EntityResponseType = HttpResponse<IEmployee>;\ntype EntityArrayResponseType = HttpResponse<IEmployee[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class EmployeeService {\n  public resourceUrl = SERVER_API_URL + 'api/employees';\n\n  constructor(protected http: HttpClient) {}\n\n  create(employee: IEmployee): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(employee);\n    return this.http\n      .post<IEmployee>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(employee: IEmployee): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(employee);\n    return this.http\n      .put<IEmployee>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IEmployee>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IEmployee[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  protected convertDateFromClient(employee: IEmployee): IEmployee {\n    const copy: IEmployee = Object.assign({}, employee, {\n      hireDate: employee.hireDate && employee.hireDate.isValid() ? employee.hireDate.toJSON() : undefined,\n    });\n    return copy;\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.hireDate = res.body.hireDate ? moment(res.body.hireDate) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((employee: IEmployee) => {\n        employee.hireDate = employee.hireDate ? moment(employee.hireDate) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]}