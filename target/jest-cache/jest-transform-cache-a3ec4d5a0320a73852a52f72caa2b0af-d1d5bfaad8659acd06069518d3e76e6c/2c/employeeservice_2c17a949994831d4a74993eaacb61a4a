9372c91c7392a5a57f98ec019fe2ad12
"use strict";

/* istanbul ignore next */
function cov_1xxemk3gsl() {
  var path = "/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/main/webapp/app/entities/employee/employee.service.ts";
  var hash = "6e7d38411635aeaab963c031cc39c3b00125aa52";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/main/webapp/app/entities/employee/employee.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 46
        }
      },
      "5": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 45
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 32
        }
      },
      "7": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 9,
          column: 52
        }
      },
      "8": {
        start: {
          line: 10,
          column: 23
        },
        end: {
          line: 10,
          column: 62
        }
      },
      "9": {
        start: {
          line: 11,
          column: 22
        },
        end: {
          line: 62,
          column: 1
        }
      },
      "10": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 25
        }
      },
      "11": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 76
        }
      },
      "12": {
        start: {
          line: 17,
          column: 21
        },
        end: {
          line: 17,
          column: 57
        }
      },
      "13": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 20,
          column: 77
        }
      },
      "14": {
        start: {
          line: 20,
          column: 43
        },
        end: {
          line: 20,
          column: 74
        }
      },
      "15": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 57
        }
      },
      "16": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 26,
          column: 77
        }
      },
      "17": {
        start: {
          line: 26,
          column: 43
        },
        end: {
          line: 26,
          column: 74
        }
      },
      "18": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 31,
          column: 77
        }
      },
      "19": {
        start: {
          line: 31,
          column: 43
        },
        end: {
          line: 31,
          column: 74
        }
      },
      "20": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 63
        }
      },
      "21": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 37,
          column: 82
        }
      },
      "22": {
        start: {
          line: 37,
          column: 43
        },
        end: {
          line: 37,
          column: 79
        }
      },
      "23": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 86
        }
      },
      "24": {
        start: {
          line: 43,
          column: 21
        },
        end: {
          line: 45,
          column: 10
        }
      },
      "25": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 20
        }
      },
      "26": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "27": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 90
        }
      },
      "28": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 19
        }
      },
      "29": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "30": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 58,
          column: 15
        }
      },
      "31": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 94
        }
      },
      "32": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 19
        }
      },
      "33": {
        start: {
          line: 63,
          column: 0
        },
        end: {
          line: 66,
          column: 20
        }
      },
      "34": {
        start: {
          line: 67,
          column: 0
        },
        end: {
          line: 67,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 21
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 34
          },
          end: {
            line: 20,
            column: 35
          }
        },
        loc: {
          start: {
            line: 20,
            column: 43
          },
          end: {
            line: 20,
            column: 74
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 21
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 34
          },
          end: {
            line: 26,
            column: 35
          }
        },
        loc: {
          start: {
            line: 26,
            column: 43
          },
          end: {
            line: 26,
            column: 74
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 13
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 28
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 31,
            column: 34
          },
          end: {
            line: 31,
            column: 35
          }
        },
        loc: {
          start: {
            line: 31,
            column: 43
          },
          end: {
            line: 31,
            column: 74
          }
        },
        line: 31
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 15
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 33
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 37,
            column: 34
          },
          end: {
            line: 37,
            column: 35
          }
        },
        loc: {
          start: {
            line: 37,
            column: 43
          },
          end: {
            line: 37,
            column: 79
          }
        },
        line: 37
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 15
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 36
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 42
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 31
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 48
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 36
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 54
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 56,
            column: 29
          },
          end: {
            line: 56,
            column: 30
          }
        },
        loc: {
          start: {
            line: 56,
            column: 43
          },
          end: {
            line: 58,
            column: 13
          }
        },
        line: 56
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 22
          },
          end: {
            line: 44,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 44,
            column: 73
          },
          end: {
            line: 44,
            column: 99
          }
        }, {
          start: {
            line: 44,
            column: 102
          },
          end: {
            line: 44,
            column: 111
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 22
          },
          end: {
            line: 44,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 22
          },
          end: {
            line: 44,
            column: 39
          }
        }, {
          start: {
            line: 44,
            column: 43
          },
          end: {
            line: 44,
            column: 70
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 50,
            column: 32
          },
          end: {
            line: 50,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 52
          },
          end: {
            line: 50,
            column: 77
          }
        }, {
          start: {
            line: 50,
            column: 80
          },
          end: {
            line: 50,
            column: 89
          }
        }],
        line: 50
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 36
          },
          end: {
            line: 57,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 56
          },
          end: {
            line: 57,
            column: 81
          }
        }, {
          start: {
            line: 57,
            column: 84
          },
          end: {
            line: 57,
            column: 93
          }
        }],
        line: 57
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/main/webapp/app/entities/employee/employee.service.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/main/webapp/app/entities/employee/employee.service.ts"],
      sourcesContent: ["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as moment from 'moment';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared/util/request-util';\nimport { IEmployee } from 'app/shared/model/employee.model';\n\ntype EntityResponseType = HttpResponse<IEmployee>;\ntype EntityArrayResponseType = HttpResponse<IEmployee[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class EmployeeService {\n  public resourceUrl = SERVER_API_URL + 'api/employees';\n\n  constructor(protected http: HttpClient) {}\n\n  create(employee: IEmployee): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(employee);\n    return this.http\n      .post<IEmployee>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(employee: IEmployee): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(employee);\n    return this.http\n      .put<IEmployee>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IEmployee>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IEmployee[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  protected convertDateFromClient(employee: IEmployee): IEmployee {\n    const copy: IEmployee = Object.assign({}, employee, {\n      hireDate: employee.hireDate && employee.hireDate.isValid() ? employee.hireDate.toJSON() : undefined,\n    });\n    return copy;\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.hireDate = res.body.hireDate ? moment(res.body.hireDate) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((employee: IEmployee) => {\n        employee.hireDate = employee.hireDate ? moment(employee.hireDate) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6e7d38411635aeaab963c031cc39c3b00125aa52"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xxemk3gsl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1xxemk3gsl();
cov_1xxemk3gsl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1xxemk3gsl().s[1]++;
exports.EmployeeService = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_1xxemk3gsl().s[2]++, require("tslib"));
const core_1 =
/* istanbul ignore next */
(cov_1xxemk3gsl().s[3]++, require("@angular/core"));
const http_1 =
/* istanbul ignore next */
(cov_1xxemk3gsl().s[4]++, require("@angular/common/http"));
const operators_1 =
/* istanbul ignore next */
(cov_1xxemk3gsl().s[5]++, require("rxjs/operators"));
const moment =
/* istanbul ignore next */
(cov_1xxemk3gsl().s[6]++, require("moment"));
const app_constants_1 =
/* istanbul ignore next */
(cov_1xxemk3gsl().s[7]++, require("app/app.constants"));
const request_util_1 =
/* istanbul ignore next */
(cov_1xxemk3gsl().s[8]++, require("app/shared/util/request-util"));

/* istanbul ignore next */
cov_1xxemk3gsl().s[9]++;
let EmployeeService = class EmployeeService {
  constructor(http) {
    /* istanbul ignore next */
    cov_1xxemk3gsl().f[0]++;
    cov_1xxemk3gsl().s[10]++;
    this.http = http;

    /* istanbul ignore next */
    cov_1xxemk3gsl().s[11]++;
    this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/employees';
  }

  create(employee) {
    /* istanbul ignore next */
    cov_1xxemk3gsl().f[1]++;
    const copy =
    /* istanbul ignore next */
    (cov_1xxemk3gsl().s[12]++, this.convertDateFromClient(employee));

    /* istanbul ignore next */
    cov_1xxemk3gsl().s[13]++;
    return this.http.post(this.resourceUrl, copy, {
      observe: 'response'
    }).pipe(operators_1.map(res => {
      /* istanbul ignore next */
      cov_1xxemk3gsl().f[2]++;
      cov_1xxemk3gsl().s[14]++;
      return this.convertDateFromServer(res);
    }));
  }

  update(employee) {
    /* istanbul ignore next */
    cov_1xxemk3gsl().f[3]++;
    const copy =
    /* istanbul ignore next */
    (cov_1xxemk3gsl().s[15]++, this.convertDateFromClient(employee));

    /* istanbul ignore next */
    cov_1xxemk3gsl().s[16]++;
    return this.http.put(this.resourceUrl, copy, {
      observe: 'response'
    }).pipe(operators_1.map(res => {
      /* istanbul ignore next */
      cov_1xxemk3gsl().f[4]++;
      cov_1xxemk3gsl().s[17]++;
      return this.convertDateFromServer(res);
    }));
  }

  find(id) {
    /* istanbul ignore next */
    cov_1xxemk3gsl().f[5]++;
    cov_1xxemk3gsl().s[18]++;
    return this.http.get(`${this.resourceUrl}/${id}`, {
      observe: 'response'
    }).pipe(operators_1.map(res => {
      /* istanbul ignore next */
      cov_1xxemk3gsl().f[6]++;
      cov_1xxemk3gsl().s[19]++;
      return this.convertDateFromServer(res);
    }));
  }

  query(req) {
    /* istanbul ignore next */
    cov_1xxemk3gsl().f[7]++;
    const options =
    /* istanbul ignore next */
    (cov_1xxemk3gsl().s[20]++, request_util_1.createRequestOption(req));

    /* istanbul ignore next */
    cov_1xxemk3gsl().s[21]++;
    return this.http.get(this.resourceUrl, {
      params: options,
      observe: 'response'
    }).pipe(operators_1.map(res => {
      /* istanbul ignore next */
      cov_1xxemk3gsl().f[8]++;
      cov_1xxemk3gsl().s[22]++;
      return this.convertDateArrayFromServer(res);
    }));
  }

  delete(id) {
    /* istanbul ignore next */
    cov_1xxemk3gsl().f[9]++;
    cov_1xxemk3gsl().s[23]++;
    return this.http.delete(`${this.resourceUrl}/${id}`, {
      observe: 'response'
    });
  }

  convertDateFromClient(employee) {
    /* istanbul ignore next */
    cov_1xxemk3gsl().f[10]++;
    const copy =
    /* istanbul ignore next */
    (cov_1xxemk3gsl().s[24]++, Object.assign({}, employee, {
      hireDate:
      /* istanbul ignore next */
      (cov_1xxemk3gsl().b[1][0]++, employee.hireDate) &&
      /* istanbul ignore next */
      (cov_1xxemk3gsl().b[1][1]++, employee.hireDate.isValid()) ?
      /* istanbul ignore next */
      (cov_1xxemk3gsl().b[0][0]++, employee.hireDate.toJSON()) :
      /* istanbul ignore next */
      (cov_1xxemk3gsl().b[0][1]++, undefined)
    }));

    /* istanbul ignore next */
    cov_1xxemk3gsl().s[25]++;
    return copy;
  }

  convertDateFromServer(res) {
    /* istanbul ignore next */
    cov_1xxemk3gsl().f[11]++;
    cov_1xxemk3gsl().s[26]++;

    if (res.body) {
      /* istanbul ignore next */
      cov_1xxemk3gsl().b[2][0]++;
      cov_1xxemk3gsl().s[27]++;
      res.body.hireDate = res.body.hireDate ?
      /* istanbul ignore next */
      (cov_1xxemk3gsl().b[3][0]++, moment(res.body.hireDate)) :
      /* istanbul ignore next */
      (cov_1xxemk3gsl().b[3][1]++, undefined);
    } else
    /* istanbul ignore next */
    {
      cov_1xxemk3gsl().b[2][1]++;
    }

    cov_1xxemk3gsl().s[28]++;
    return res;
  }

  convertDateArrayFromServer(res) {
    /* istanbul ignore next */
    cov_1xxemk3gsl().f[12]++;
    cov_1xxemk3gsl().s[29]++;

    if (res.body) {
      /* istanbul ignore next */
      cov_1xxemk3gsl().b[4][0]++;
      cov_1xxemk3gsl().s[30]++;
      res.body.forEach(employee => {
        /* istanbul ignore next */
        cov_1xxemk3gsl().f[13]++;
        cov_1xxemk3gsl().s[31]++;
        employee.hireDate = employee.hireDate ?
        /* istanbul ignore next */
        (cov_1xxemk3gsl().b[5][0]++, moment(employee.hireDate)) :
        /* istanbul ignore next */
        (cov_1xxemk3gsl().b[5][1]++, undefined);
      });
    } else
    /* istanbul ignore next */
    {
      cov_1xxemk3gsl().b[4][1]++;
    }

    cov_1xxemk3gsl().s[32]++;
    return res;
  }

};

/* istanbul ignore next */
cov_1xxemk3gsl().s[33]++;
EmployeeService = tslib_1.__decorate([core_1.Injectable({
  providedIn: 'root'
}), tslib_1.__metadata("design:paramtypes", [http_1.HttpClient])], EmployeeService);

/* istanbul ignore next */
cov_1xxemk3gsl().s[34]++;
exports.EmployeeService = EmployeeService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,