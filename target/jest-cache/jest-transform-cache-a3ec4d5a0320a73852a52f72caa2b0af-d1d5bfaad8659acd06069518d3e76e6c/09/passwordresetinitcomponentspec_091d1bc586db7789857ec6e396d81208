1227e48d1049cb092077e56ff28f5d78
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const test_module_1 = require("../../../../test.module");
const password_reset_init_component_1 = require("app/account/password-reset/init/password-reset-init.component");
const password_reset_init_service_1 = require("app/account/password-reset/init/password-reset-init.service");
describe('Component Tests', () => {
    describe('PasswordResetInitComponent', () => {
        let fixture;
        let comp;
        beforeEach(() => {
            fixture = testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.ProBiblioTestModule],
                declarations: [password_reset_init_component_1.PasswordResetInitComponent],
                providers: [forms_1.FormBuilder],
            })
                .overrideTemplate(password_reset_init_component_1.PasswordResetInitComponent, '')
                .createComponent(password_reset_init_component_1.PasswordResetInitComponent);
            comp = fixture.componentInstance;
        });
        it('sets focus after the view has been initialized', () => {
            const node = {
                focus() { },
            };
            comp.email = new core_1.ElementRef(node);
            spyOn(node, 'focus');
            comp.ngAfterViewInit();
            expect(node.focus).toHaveBeenCalled();
        });
        it('notifies of success upon successful requestReset', testing_1.inject([password_reset_init_service_1.PasswordResetInitService], (service) => {
            spyOn(service, 'save').and.returnValue(rxjs_1.of({}));
            comp.resetRequestForm.patchValue({
                email: 'user@domain.com',
            });
            comp.requestReset();
            expect(service.save).toHaveBeenCalledWith('user@domain.com');
            expect(comp.success).toBe(true);
        }));
        it('no notification of success upon error response', testing_1.inject([password_reset_init_service_1.PasswordResetInitService], (service) => {
            spyOn(service, 'save').and.returnValue(rxjs_1.throwError({
                status: 503,
                data: 'something else',
            }));
            comp.resetRequestForm.patchValue({
                email: 'user@domain.com',
            });
            comp.requestReset();
            expect(service.save).toHaveBeenCalledWith('user@domain.com');
            expect(comp.success).toBe(false);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3NhcnVqYW5yYWphcmF0bmFtL0Rlc2t0b3AvWW5vdi9Zbm92X1RFU1RfUHJvamV0L3NyYy90ZXN0L2phdmFzY3JpcHQvc3BlYy9hcHAvYWNjb3VudC9wYXNzd29yZC1yZXNldC9pbml0L3Bhc3N3b3JkLXJlc2V0LWluaXQuY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBMkM7QUFDM0MsbURBQTBFO0FBQzFFLDBDQUE2QztBQUM3QywrQkFBc0M7QUFFdEMseURBQThEO0FBQzlELGlIQUEyRztBQUMzRyw2R0FBdUc7QUFFdkcsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixRQUFRLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO1FBQzFDLElBQUksT0FBcUQsQ0FBQztRQUMxRCxJQUFJLElBQWdDLENBQUM7UUFFckMsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE9BQU8sR0FBRyxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO2dCQUN2QyxPQUFPLEVBQUUsQ0FBQyxpQ0FBbUIsQ0FBQztnQkFDOUIsWUFBWSxFQUFFLENBQUMsMERBQTBCLENBQUM7Z0JBQzFDLFNBQVMsRUFBRSxDQUFDLG1CQUFXLENBQUM7YUFDekIsQ0FBQztpQkFDQyxnQkFBZ0IsQ0FBQywwREFBMEIsRUFBRSxFQUFFLENBQUM7aUJBQ2hELGVBQWUsQ0FBQywwREFBMEIsQ0FBQyxDQUFDO1lBQy9DLElBQUksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsZ0RBQWdELEVBQUUsR0FBRyxFQUFFO1lBQ3hELE1BQU0sSUFBSSxHQUFHO2dCQUNYLEtBQUssS0FBVSxDQUFDO2FBQ2pCLENBQUM7WUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksaUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRXJCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUV2QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsa0RBQWtELEVBQUUsZ0JBQU0sQ0FBQyxDQUFDLHNEQUF3QixDQUFDLEVBQUUsQ0FBQyxPQUFpQyxFQUFFLEVBQUU7WUFDOUgsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7Z0JBQy9CLEtBQUssRUFBRSxpQkFBaUI7YUFDekIsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBRXBCLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUM3RCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRUosRUFBRSxDQUFDLGdEQUFnRCxFQUFFLGdCQUFNLENBQUMsQ0FBQyxzREFBd0IsQ0FBQyxFQUFFLENBQUMsT0FBaUMsRUFBRSxFQUFFO1lBQzVILEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FDcEMsaUJBQVUsQ0FBQztnQkFDVCxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUUsZ0JBQWdCO2FBQ3ZCLENBQUMsQ0FDSCxDQUFDO1lBQ0YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQztnQkFDL0IsS0FBSyxFQUFFLGlCQUFpQjthQUN6QixDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFFcEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYXJ1amFucmFqYXJhdG5hbS9EZXNrdG9wL1lub3YvWW5vdl9URVNUX1Byb2pldC9zcmMvdGVzdC9qYXZhc2NyaXB0L3NwZWMvYXBwL2FjY291bnQvcGFzc3dvcmQtcmVzZXQvaW5pdC9wYXNzd29yZC1yZXNldC1pbml0LmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFByb0JpYmxpb1Rlc3RNb2R1bGUgfSBmcm9tICcuLi8uLi8uLi8uLi90ZXN0Lm1vZHVsZSc7XG5pbXBvcnQgeyBQYXNzd29yZFJlc2V0SW5pdENvbXBvbmVudCB9IGZyb20gJ2FwcC9hY2NvdW50L3Bhc3N3b3JkLXJlc2V0L2luaXQvcGFzc3dvcmQtcmVzZXQtaW5pdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUGFzc3dvcmRSZXNldEluaXRTZXJ2aWNlIH0gZnJvbSAnYXBwL2FjY291bnQvcGFzc3dvcmQtcmVzZXQvaW5pdC9wYXNzd29yZC1yZXNldC1pbml0LnNlcnZpY2UnO1xuXG5kZXNjcmliZSgnQ29tcG9uZW50IFRlc3RzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnUGFzc3dvcmRSZXNldEluaXRDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8UGFzc3dvcmRSZXNldEluaXRDb21wb25lbnQ+O1xuICAgIGxldCBjb21wOiBQYXNzd29yZFJlc2V0SW5pdENvbXBvbmVudDtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZml4dHVyZSA9IFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtQcm9CaWJsaW9UZXN0TW9kdWxlXSxcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbUGFzc3dvcmRSZXNldEluaXRDb21wb25lbnRdLFxuICAgICAgICBwcm92aWRlcnM6IFtGb3JtQnVpbGRlcl0sXG4gICAgICB9KVxuICAgICAgICAub3ZlcnJpZGVUZW1wbGF0ZShQYXNzd29yZFJlc2V0SW5pdENvbXBvbmVudCwgJycpXG4gICAgICAgIC5jcmVhdGVDb21wb25lbnQoUGFzc3dvcmRSZXNldEluaXRDb21wb25lbnQpO1xuICAgICAgY29tcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgfSk7XG5cbiAgICBpdCgnc2V0cyBmb2N1cyBhZnRlciB0aGUgdmlldyBoYXMgYmVlbiBpbml0aWFsaXplZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG5vZGUgPSB7XG4gICAgICAgIGZvY3VzKCk6IHZvaWQge30sXG4gICAgICB9O1xuICAgICAgY29tcC5lbWFpbCA9IG5ldyBFbGVtZW50UmVmKG5vZGUpO1xuICAgICAgc3B5T24obm9kZSwgJ2ZvY3VzJyk7XG5cbiAgICAgIGNvbXAubmdBZnRlclZpZXdJbml0KCk7XG5cbiAgICAgIGV4cGVjdChub2RlLmZvY3VzKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnbm90aWZpZXMgb2Ygc3VjY2VzcyB1cG9uIHN1Y2Nlc3NmdWwgcmVxdWVzdFJlc2V0JywgaW5qZWN0KFtQYXNzd29yZFJlc2V0SW5pdFNlcnZpY2VdLCAoc2VydmljZTogUGFzc3dvcmRSZXNldEluaXRTZXJ2aWNlKSA9PiB7XG4gICAgICBzcHlPbihzZXJ2aWNlLCAnc2F2ZScpLmFuZC5yZXR1cm5WYWx1ZShvZih7fSkpO1xuICAgICAgY29tcC5yZXNldFJlcXVlc3RGb3JtLnBhdGNoVmFsdWUoe1xuICAgICAgICBlbWFpbDogJ3VzZXJAZG9tYWluLmNvbScsXG4gICAgICB9KTtcblxuICAgICAgY29tcC5yZXF1ZXN0UmVzZXQoKTtcblxuICAgICAgZXhwZWN0KHNlcnZpY2Uuc2F2ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3VzZXJAZG9tYWluLmNvbScpO1xuICAgICAgZXhwZWN0KGNvbXAuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICB9KSk7XG5cbiAgICBpdCgnbm8gbm90aWZpY2F0aW9uIG9mIHN1Y2Nlc3MgdXBvbiBlcnJvciByZXNwb25zZScsIGluamVjdChbUGFzc3dvcmRSZXNldEluaXRTZXJ2aWNlXSwgKHNlcnZpY2U6IFBhc3N3b3JkUmVzZXRJbml0U2VydmljZSkgPT4ge1xuICAgICAgc3B5T24oc2VydmljZSwgJ3NhdmUnKS5hbmQucmV0dXJuVmFsdWUoXG4gICAgICAgIHRocm93RXJyb3Ioe1xuICAgICAgICAgIHN0YXR1czogNTAzLFxuICAgICAgICAgIGRhdGE6ICdzb21ldGhpbmcgZWxzZScsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgY29tcC5yZXNldFJlcXVlc3RGb3JtLnBhdGNoVmFsdWUoe1xuICAgICAgICBlbWFpbDogJ3VzZXJAZG9tYWluLmNvbScsXG4gICAgICB9KTtcbiAgICAgIGNvbXAucmVxdWVzdFJlc2V0KCk7XG5cbiAgICAgIGV4cGVjdChzZXJ2aWNlLnNhdmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd1c2VyQGRvbWFpbi5jb20nKTtcbiAgICAgIGV4cGVjdChjb21wLnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgIH0pKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==