{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/test/javascript/spec/app/core/user/account.service.spec.ts","mappings":";;AAAA,4CAAyC;AACzC,0DAA8F;AAC9F,mDAAgD;AAChD,6CAA+D;AAC/D,mDAAqD;AAErD,qDAAmD;AACnD,mEAA+D;AAE/D,kFAAqE;AACrE,+EAA0E;AAC1E,kFAA6E;AAC7E,4EAAiE;AACjE,4FAAsF;AAEtF,SAAS,sBAAsB,CAAC,WAAqB;IACnD,OAAO;QACL,SAAS,EAAE,IAAI;QACf,WAAW;QACX,KAAK,EAAE,EAAE;QACT,SAAS,EAAE,EAAE;QACb,OAAO,EAAE,EAAE;QACX,QAAQ,EAAE,EAAE;QACZ,KAAK,EAAE,EAAE;QACT,QAAQ,EAAE,EAAE;KACb,CAAC;AACJ,CAAC;AAED,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,IAAI,OAAuB,CAAC;QAC5B,IAAI,QAA+B,CAAC;QACpC,IAAI,cAAuC,CAAC;QAC5C,IAAI,MAAkB,CAAC;QAEvB,UAAU,CAAC,GAAG,EAAE;YACd,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,OAAO,EAAE,CAAC,iCAAuB,EAAE,oCAAmB,CAAC,OAAO,EAAE,CAAC;gBACjE,SAAS,EAAE;oBACT,0BAAY;oBACZ;wBACE,OAAO,EAAE,gCAAkB;wBAC3B,QAAQ,EAAE,2CAAmB;qBAC9B;oBACD;wBACE,OAAO,EAAE,2CAAmB;wBAC5B,QAAQ,EAAE,oDAAuB;qBAClC;oBACD;wBACE,OAAO,EAAE,eAAM;wBACf,QAAQ,EAAE,+BAAU;qBACrB;iBACF;aACF,CAAC,CAAC;YAEH,OAAO,GAAG,iBAAO,CAAC,GAAG,CAAC,gCAAc,CAAC,CAAC;YACtC,QAAQ,GAAG,iBAAO,CAAC,GAAG,CAAC,+BAAqB,CAAC,CAAC;YAC9C,cAAc,GAAG,iBAAO,CAAC,GAAG,CAAC,2CAAmB,CAAC,CAAC;YAClD,MAAM,GAAG,iBAAO,CAAC,GAAG,CAAC,eAAM,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,QAAQ,CAAC,MAAM,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;YAC5B,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;gBAC/D,QAAQ;gBACR,IAAI,YAAY,GAAmB,sBAAsB,CAAC,EAAE,CAAC,CAAC;gBAC9D,OAAO,CAAC,sBAAsB,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC;gBAEhF,OAAO;gBACP,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAE3B,OAAO;gBACP,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAChC,MAAM,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,4EAA4E,EAAE,GAAG,EAAE;gBACpF,QAAQ;gBACR,MAAM,cAAc,GAAG,sBAAsB,CAAC,EAAE,CAAC,CAAC;gBAClD,IAAI,YAAY,GAAmB,IAAI,CAAC;gBACxC,OAAO,CAAC,sBAAsB,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC;gBAEhF,OAAO;gBACP,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;gBAErC,OAAO;gBACP,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;gBAC7C,MAAM,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;YACxB,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;gBACnD,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;gBAC/B,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;gBAClD,MAAM,WAAW,GAAG,8BAAc,GAAG,aAAa,CAAC;gBAEnD,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,EAAE,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,mIAAmI,EAAE,GAAG,EAAE;gBAC3I,kCAAkC;gBAClC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;gBAC/B,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBAEhD,cAAc;gBACd,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;gBAE/B,kCAAkC;gBAClC,QAAQ,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;gBAEvC,iBAAiB;gBACjB,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAC3B,gBAAgB;gBAChB,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;gBAE/B,8BAA8B;gBAC9B,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;gBACnC,EAAE,CAAC,2EAA2E,EAAE,GAAG,EAAE;oBACnF,QAAQ;oBACR,cAAc,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;oBAEjD,OAAO;oBACP,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;oBAC/B,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;oBAEhD,OAAO;oBACP,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;oBAC1D,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;oBAC5D,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC;gBAC7E,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,0EAA0E,EAAE,GAAG,EAAE;oBAClF,OAAO;oBACP,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;oBAC/B,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;oBAEhE,OAAO;oBACP,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;oBACxD,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;oBAC1D,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;gBACzD,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,uGAAuG,EAAE,GAAG,EAAE;oBAC/G,QAAQ;oBACR,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;oBAEjC,OAAO;oBACP,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;oBAC/B,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;oBAEhD,OAAO;oBACP,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;oBAC1D,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;oBAC1D,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;gBACzD,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC/B,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;gBAChD,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;oBACnD,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,+BAAS,CAAC,IAAI,CAAC,CAAC;oBAC7D,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;oBACrE,OAAO,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC,+BAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAE/D,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,+BAAS,CAAC,KAAK,CAAC,CAAC;oBAE9D,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;oBAChE,OAAO,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC,+BAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAE/D,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,+BAAS,CAAC,IAAI,CAAC,CAAC;oBAE7D,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;gBAC/C,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;oBACnD,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,+BAAS,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC/D,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;gBACnC,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;oBACrE,OAAO,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC,+BAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAE/D,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,+BAAS,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEhE,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;oBAChE,OAAO,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC,+BAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAE/D,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,+BAAS,CAAC,IAAI,EAAE,+BAAS,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEhF,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/test/javascript/spec/app/core/user/account.service.spec.ts"],"sourcesContent":["import { Router } from '@angular/router';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { JhiDateUtils, JhiLanguageService } from 'ng-jhipster';\nimport { NgxWebstorageModule } from 'ngx-webstorage';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/user/account.model';\nimport { Authority } from 'app/shared/constants/authority.constants';\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\nimport { MockLanguageService } from '../../../helpers/mock-language.service';\nimport { MockRouter } from '../../../helpers/mock-route.service';\nimport { MockStateStorageService } from '../../../helpers/mock-state-storage.service';\n\nfunction accountWithAuthorities(authorities: string[]): Account {\n  return {\n    activated: true,\n    authorities,\n    email: '',\n    firstName: '',\n    langKey: '',\n    lastName: '',\n    login: '',\n    imageUrl: '',\n  };\n}\n\ndescribe('Service Tests', () => {\n  describe('Account Service', () => {\n    let service: AccountService;\n    let httpMock: HttpTestingController;\n    let storageService: MockStateStorageService;\n    let router: MockRouter;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule, NgxWebstorageModule.forRoot()],\n        providers: [\n          JhiDateUtils,\n          {\n            provide: JhiLanguageService,\n            useClass: MockLanguageService,\n          },\n          {\n            provide: StateStorageService,\n            useClass: MockStateStorageService,\n          },\n          {\n            provide: Router,\n            useClass: MockRouter,\n          },\n        ],\n      });\n\n      service = TestBed.get(AccountService);\n      httpMock = TestBed.get(HttpTestingController);\n      storageService = TestBed.get(StateStorageService);\n      router = TestBed.get(Router);\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n\n    describe('authenticate', () => {\n      it('authenticationState should emit null if input is null', () => {\n        // GIVEN\n        let userIdentity: Account | null = accountWithAuthorities([]);\n        service.getAuthenticationState().subscribe(account => (userIdentity = account));\n\n        // WHEN\n        service.authenticate(null);\n\n        // THEN\n        expect(userIdentity).toBeNull();\n        expect(service.isAuthenticated()).toBe(false);\n      });\n\n      it('authenticationState should emit the same account as was in input parameter', () => {\n        // GIVEN\n        const expectedResult = accountWithAuthorities([]);\n        let userIdentity: Account | null = null;\n        service.getAuthenticationState().subscribe(account => (userIdentity = account));\n\n        // WHEN\n        service.authenticate(expectedResult);\n\n        // THEN\n        expect(userIdentity).toEqual(expectedResult);\n        expect(service.isAuthenticated()).toBe(true);\n      });\n    });\n\n    describe('identity', () => {\n      it('should call /account if user is undefined', () => {\n        service.identity().subscribe();\n        const req = httpMock.expectOne({ method: 'GET' });\n        const resourceUrl = SERVER_API_URL + 'api/account';\n\n        expect(req.request.url).toEqual(`${resourceUrl}`);\n      });\n\n      it('should call /account only once if not logged out after first authentication and should call /account again if user has logged out', () => {\n        // Given the user is authenticated\n        service.identity().subscribe();\n        httpMock.expectOne({ method: 'GET' }).flush({});\n\n        // When I call\n        service.identity().subscribe();\n\n        // Then there is no second request\n        httpMock.expectNone({ method: 'GET' });\n\n        // When I log out\n        service.authenticate(null);\n        // and then call\n        service.identity().subscribe();\n\n        // Then there is a new request\n        httpMock.expectOne({ method: 'GET' });\n      });\n\n      describe('navigateToStoredUrl', () => {\n        it('should navigate to the previous stored url post successful authentication', () => {\n          // GIVEN\n          storageService.setResponse('admin/users?page=0');\n\n          // WHEN\n          service.identity().subscribe();\n          httpMock.expectOne({ method: 'GET' }).flush({});\n\n          // THEN\n          expect(storageService.getUrlSpy).toHaveBeenCalledTimes(1);\n          expect(storageService.clearUrlSpy).toHaveBeenCalledTimes(1);\n          expect(router.navigateByUrlSpy).toHaveBeenCalledWith('admin/users?page=0');\n        });\n\n        it('should not navigate to the previous stored url when authentication fails', () => {\n          // WHEN\n          service.identity().subscribe();\n          httpMock.expectOne({ method: 'GET' }).error(new ErrorEvent(''));\n\n          // THEN\n          expect(storageService.getUrlSpy).not.toHaveBeenCalled();\n          expect(storageService.clearUrlSpy).not.toHaveBeenCalled();\n          expect(router.navigateByUrlSpy).not.toHaveBeenCalled();\n        });\n\n        it('should not navigate to the previous stored url when no such url exists post successful authentication', () => {\n          // GIVEN\n          storageService.setResponse(null);\n\n          // WHEN\n          service.identity().subscribe();\n          httpMock.expectOne({ method: 'GET' }).flush({});\n\n          // THEN\n          expect(storageService.getUrlSpy).toHaveBeenCalledTimes(1);\n          expect(storageService.clearUrlSpy).not.toHaveBeenCalled();\n          expect(router.navigateByUrlSpy).not.toHaveBeenCalled();\n        });\n      });\n    });\n\n    describe('hasAnyAuthority', () => {\n      describe('hasAnyAuthority string parameter', () => {\n        it('should return false if user is not logged', () => {\n          const hasAuthority = service.hasAnyAuthority(Authority.USER);\n          expect(hasAuthority).toBe(false);\n        });\n\n        it('should return false if user is logged and has not authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority(Authority.ADMIN);\n\n          expect(hasAuthority).toBe(false);\n        });\n\n        it('should return true if user is logged and has authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority(Authority.USER);\n\n          expect(hasAuthority).toBe(true);\n        });\n      });\n\n      describe('hasAnyAuthority array parameter', () => {\n        it('should return false if user is not logged', () => {\n          const hasAuthority = service.hasAnyAuthority([Authority.USER]);\n          expect(hasAuthority).toBeFalsy();\n        });\n\n        it('should return false if user is logged and has not authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority([Authority.ADMIN]);\n\n          expect(hasAuthority).toBe(false);\n        });\n\n        it('should return true if user is logged and has authority', () => {\n          service.authenticate(accountWithAuthorities([Authority.USER]));\n\n          const hasAuthority = service.hasAnyAuthority([Authority.USER, Authority.ADMIN]);\n\n          expect(hasAuthority).toBe(true);\n        });\n      });\n    });\n  });\n});\n"],"version":3}