{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/test/javascript/spec/app/admin/health/health.component.spec.ts","mappings":"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","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/test/javascript/spec/app/admin/health/health.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, async } from '@angular/core/testing';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\n\nimport { ProBiblioTestModule } from '../../../test.module';\nimport { HealthComponent } from 'app/admin/health/health.component';\nimport { HealthService, Health } from 'app/admin/health/health.service';\n\ndescribe('Component Tests', () => {\n  describe('HealthComponent', () => {\n    let comp: HealthComponent;\n    let fixture: ComponentFixture<HealthComponent>;\n    let service: HealthService;\n\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [ProBiblioTestModule],\n        declarations: [HealthComponent],\n      })\n        .overrideTemplate(HealthComponent, '')\n        .compileComponents();\n    }));\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(HealthComponent);\n      comp = fixture.componentInstance;\n      service = fixture.debugElement.injector.get(HealthService);\n    });\n\n    describe('getBadgeClass', () => {\n      it('should get badge class', () => {\n        const upBadgeClass = comp.getBadgeClass('UP');\n        const downBadgeClass = comp.getBadgeClass('DOWN');\n        expect(upBadgeClass).toEqual('badge-success');\n        expect(downBadgeClass).toEqual('badge-danger');\n      });\n    });\n\n    describe('refresh', () => {\n      it('should call refresh on init', () => {\n        // GIVEN\n        const health: Health = { status: 'UP', components: { mail: { status: 'UP', details: 'mailDetails' } } };\n        spyOn(service, 'checkHealth').and.returnValue(of(health));\n\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(service.checkHealth).toHaveBeenCalled();\n        expect(comp.health).toEqual(health);\n      });\n\n      it('should handle a 503 on refreshing health data', () => {\n        // GIVEN\n        const health: Health = { status: 'DOWN', components: { mail: { status: 'DOWN', details: 'mailDetails' } } };\n        spyOn(service, 'checkHealth').and.returnValue(throwError(new HttpErrorResponse({ status: 503, error: health })));\n\n        // WHEN\n        comp.refresh();\n\n        // THEN\n        expect(service.checkHealth).toHaveBeenCalled();\n        expect(comp.health).toEqual(health);\n      });\n    });\n  });\n});\n"],"version":3}