{"file":"/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/test/javascript/spec/app/entities/job-history/job-history.service.spec.ts","mappings":"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","names":[],"sources":["/Users/sarujanrajaratnam/Desktop/Ynov/Ynov_TEST_Projet/src/test/javascript/spec/app/entities/job-history/job-history.service.spec.ts"],"sourcesContent":["import { TestBed, getTestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport * as moment from 'moment';\nimport { DATE_TIME_FORMAT } from 'app/shared/constants/input.constants';\nimport { JobHistoryService } from 'app/entities/job-history/job-history.service';\nimport { IJobHistory, JobHistory } from 'app/shared/model/job-history.model';\nimport { Language } from 'app/shared/model/enumerations/language.model';\n\ndescribe('Service Tests', () => {\n  describe('JobHistory Service', () => {\n    let injector: TestBed;\n    let service: JobHistoryService;\n    let httpMock: HttpTestingController;\n    let elemDefault: IJobHistory;\n    let expectedResult: IJobHistory | IJobHistory[] | boolean | null;\n    let currentDate: moment.Moment;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n      });\n      expectedResult = null;\n      injector = getTestBed();\n      service = injector.get(JobHistoryService);\n      httpMock = injector.get(HttpTestingController);\n      currentDate = moment();\n\n      elemDefault = new JobHistory(0, currentDate, currentDate, Language.FRENCH);\n    });\n\n    describe('Service methods', () => {\n      it('should find an element', () => {\n        const returnedFromService = Object.assign(\n          {\n            startDate: currentDate.format(DATE_TIME_FORMAT),\n            endDate: currentDate.format(DATE_TIME_FORMAT),\n          },\n          elemDefault\n        );\n\n        service.find(123).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(elemDefault);\n      });\n\n      it('should create a JobHistory', () => {\n        const returnedFromService = Object.assign(\n          {\n            id: 0,\n            startDate: currentDate.format(DATE_TIME_FORMAT),\n            endDate: currentDate.format(DATE_TIME_FORMAT),\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            startDate: currentDate,\n            endDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.create(new JobHistory()).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'POST' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(expected);\n      });\n\n      it('should update a JobHistory', () => {\n        const returnedFromService = Object.assign(\n          {\n            startDate: currentDate.format(DATE_TIME_FORMAT),\n            endDate: currentDate.format(DATE_TIME_FORMAT),\n            language: 'BBBBBB',\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            startDate: currentDate,\n            endDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.update(expected).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'PUT' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(expected);\n      });\n\n      it('should return a list of JobHistory', () => {\n        const returnedFromService = Object.assign(\n          {\n            startDate: currentDate.format(DATE_TIME_FORMAT),\n            endDate: currentDate.format(DATE_TIME_FORMAT),\n            language: 'BBBBBB',\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            startDate: currentDate,\n            endDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.query().subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush([returnedFromService]);\n        httpMock.verify();\n        expect(expectedResult).toContainEqual(expected);\n      });\n\n      it('should delete a JobHistory', () => {\n        service.delete(123).subscribe(resp => (expectedResult = resp.ok));\n\n        const req = httpMock.expectOne({ method: 'DELETE' });\n        req.flush({ status: 200 });\n        expect(expectedResult);\n      });\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n  });\n});\n"],"version":3}