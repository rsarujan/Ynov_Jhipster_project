c2d946bf14edefc83f76d2b02b014620
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const moment = require("moment");
const input_constants_1 = require("app/shared/constants/input.constants");
const job_history_service_1 = require("app/entities/job-history/job-history.service");
const job_history_model_1 = require("app/shared/model/job-history.model");
describe('Service Tests', () => {
    describe('JobHistory Service', () => {
        let injector;
        let service;
        let httpMock;
        let elemDefault;
        let expectedResult;
        let currentDate;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            expectedResult = null;
            injector = testing_1.getTestBed();
            service = injector.get(job_history_service_1.JobHistoryService);
            httpMock = injector.get(testing_2.HttpTestingController);
            currentDate = moment();
            elemDefault = new job_history_model_1.JobHistory(0, currentDate, currentDate, "FRENCH" /* FRENCH */);
        });
        describe('Service methods', () => {
            it('should find an element', () => {
                const returnedFromService = Object.assign({
                    startDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    endDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                }, elemDefault);
                service.find(123).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(elemDefault);
            });
            it('should create a JobHistory', () => {
                const returnedFromService = Object.assign({
                    id: 0,
                    startDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    endDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                }, elemDefault);
                const expected = Object.assign({
                    startDate: currentDate,
                    endDate: currentDate,
                }, returnedFromService);
                service.create(new job_history_model_1.JobHistory()).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'POST' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should update a JobHistory', () => {
                const returnedFromService = Object.assign({
                    startDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    endDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    language: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({
                    startDate: currentDate,
                    endDate: currentDate,
                }, returnedFromService);
                service.update(expected).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'PUT' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should return a list of JobHistory', () => {
                const returnedFromService = Object.assign({
                    startDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    endDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    language: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({
                    startDate: currentDate,
                    endDate: currentDate,
                }, returnedFromService);
                service.query().subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush([returnedFromService]);
                httpMock.verify();
                expect(expectedResult).toContainEqual(expected);
            });
            it('should delete a JobHistory', () => {
                service.delete(123).subscribe(resp => (expectedResult = resp.ok));
                const req = httpMock.expectOne({ method: 'DELETE' });
                req.flush({ status: 200 });
                expect(expectedResult);
            });
        });
        afterEach(() => {
            httpMock.verify();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3NhcnVqYW5yYWphcmF0bmFtL0Rlc2t0b3AvWW5vdi9Zbm92X1RFU1RfUHJvamV0L3NyYy90ZXN0L2phdmFzY3JpcHQvc3BlYy9hcHAvZW50aXRpZXMvam9iLWhpc3Rvcnkvam9iLWhpc3Rvcnkuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQTREO0FBQzVELDBEQUE4RjtBQUM5RixpQ0FBaUM7QUFDakMsMEVBQXdFO0FBQ3hFLHNGQUFpRjtBQUNqRiwwRUFBNkU7QUFHN0UsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDN0IsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtRQUNsQyxJQUFJLFFBQWlCLENBQUM7UUFDdEIsSUFBSSxPQUEwQixDQUFDO1FBQy9CLElBQUksUUFBK0IsQ0FBQztRQUNwQyxJQUFJLFdBQXdCLENBQUM7UUFDN0IsSUFBSSxjQUE0RCxDQUFDO1FBQ2pFLElBQUksV0FBMEIsQ0FBQztRQUUvQixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsT0FBTyxFQUFFLENBQUMsaUNBQXVCLENBQUM7YUFDbkMsQ0FBQyxDQUFDO1lBQ0gsY0FBYyxHQUFHLElBQUksQ0FBQztZQUN0QixRQUFRLEdBQUcsb0JBQVUsRUFBRSxDQUFDO1lBQ3hCLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLHVDQUFpQixDQUFDLENBQUM7WUFDMUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsK0JBQXFCLENBQUMsQ0FBQztZQUMvQyxXQUFXLEdBQUcsTUFBTSxFQUFFLENBQUM7WUFFdkIsV0FBVyxHQUFHLElBQUksOEJBQVUsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsd0JBQWtCLENBQUM7UUFDN0UsQ0FBQyxDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO1lBQy9CLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVB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QUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUNyRCxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQzNCLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNiLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3NhcnVqYW5yYWphcmF0bmFtL0Rlc2t0b3AvWW5vdi9Zbm92X1RFU1RfUHJvamV0L3NyYy90ZXN0L2phdmFzY3JpcHQvc3BlYy9hcHAvZW50aXRpZXMvam9iLWhpc3Rvcnkvam9iLWhpc3Rvcnkuc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RCZWQsIGdldFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSHR0cENsaWVudFRlc3RpbmdNb2R1bGUsIEh0dHBUZXN0aW5nQ29udHJvbGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnO1xuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBEQVRFX1RJTUVfRk9STUFUIH0gZnJvbSAnYXBwL3NoYXJlZC9jb25zdGFudHMvaW5wdXQuY29uc3RhbnRzJztcbmltcG9ydCB7IEpvYkhpc3RvcnlTZXJ2aWNlIH0gZnJvbSAnYXBwL2VudGl0aWVzL2pvYi1oaXN0b3J5L2pvYi1oaXN0b3J5LnNlcnZpY2UnO1xuaW1wb3J0IHsgSUpvYkhpc3RvcnksIEpvYkhpc3RvcnkgfSBmcm9tICdhcHAvc2hhcmVkL21vZGVsL2pvYi1oaXN0b3J5Lm1vZGVsJztcbmltcG9ydCB7IExhbmd1YWdlIH0gZnJvbSAnYXBwL3NoYXJlZC9tb2RlbC9lbnVtZXJhdGlvbnMvbGFuZ3VhZ2UubW9kZWwnO1xuXG5kZXNjcmliZSgnU2VydmljZSBUZXN0cycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ0pvYkhpc3RvcnkgU2VydmljZScsICgpID0+IHtcbiAgICBsZXQgaW5qZWN0b3I6IFRlc3RCZWQ7XG4gICAgbGV0IHNlcnZpY2U6IEpvYkhpc3RvcnlTZXJ2aWNlO1xuICAgIGxldCBodHRwTW9jazogSHR0cFRlc3RpbmdDb250cm9sbGVyO1xuICAgIGxldCBlbGVtRGVmYXVsdDogSUpvYkhpc3Rvcnk7XG4gICAgbGV0IGV4cGVjdGVkUmVzdWx0OiBJSm9iSGlzdG9yeSB8IElKb2JIaXN0b3J5W10gfCBib29sZWFuIHwgbnVsbDtcbiAgICBsZXQgY3VycmVudERhdGU6IG1vbWVudC5Nb21lbnQ7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdGVkUmVzdWx0ID0gbnVsbDtcbiAgICAgIGluamVjdG9yID0gZ2V0VGVzdEJlZCgpO1xuICAgICAgc2VydmljZSA9IGluamVjdG9yLmdldChKb2JIaXN0b3J5U2VydmljZSk7XG4gICAgICBodHRwTW9jayA9IGluamVjdG9yLmdldChIdHRwVGVzdGluZ0NvbnRyb2xsZXIpO1xuICAgICAgY3VycmVudERhdGUgPSBtb21lbnQoKTtcblxuICAgICAgZWxlbURlZmF1bHQgPSBuZXcgSm9iSGlzdG9yeSgwLCBjdXJyZW50RGF0ZSwgY3VycmVudERhdGUsIExhbmd1YWdlLkZSRU5DSCk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnU2VydmljZSBtZXRob2RzJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBmaW5kIGFuIGVsZW1lbnQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJldHVybmVkRnJvbVNlcnZpY2UgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogY3VycmVudERhdGUuZm9ybWF0KERBVEVfVElNRV9GT1JNQVQpLFxuICAgICAgICAgICAgZW5kRGF0ZTogY3VycmVudERhdGUuZm9ybWF0KERBVEVfVElNRV9GT1JNQVQpLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZWxlbURlZmF1bHRcbiAgICAgICAgKTtcblxuICAgICAgICBzZXJ2aWNlLmZpbmQoMTIzKS5zdWJzY3JpYmUocmVzcCA9PiAoZXhwZWN0ZWRSZXN1bHQgPSByZXNwLmJvZHkpKTtcblxuICAgICAgICBjb25zdCByZXEgPSBodHRwTW9jay5leHBlY3RPbmUoeyBtZXRob2Q6ICdHRVQnIH0pO1xuICAgICAgICByZXEuZmx1c2gocmV0dXJuZWRGcm9tU2VydmljZSk7XG4gICAgICAgIGV4cGVjdChleHBlY3RlZFJlc3VsdCkudG9NYXRjaE9iamVjdChlbGVtRGVmYXVsdCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBKb2JIaXN0b3J5JywgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXR1cm5lZEZyb21TZXJ2aWNlID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogMCxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogY3VycmVudERhdGUuZm9ybWF0KERBVEVfVElNRV9GT1JNQVQpLFxuICAgICAgICAgICAgZW5kRGF0ZTogY3VycmVudERhdGUuZm9ybWF0KERBVEVfVElNRV9GT1JNQVQpLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZWxlbURlZmF1bHRcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBleHBlY3RlZCA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhcnREYXRlOiBjdXJyZW50RGF0ZSxcbiAgICAgICAgICAgIGVuZERhdGU6IGN1cnJlbnREYXRlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmV0dXJuZWRGcm9tU2VydmljZVxuICAgICAgICApO1xuXG4gICAgICAgIHNlcnZpY2UuY3JlYXRlKG5ldyBKb2JIaXN0b3J5KCkpLnN1YnNjcmliZShyZXNwID0+IChleHBlY3RlZFJlc3VsdCA9IHJlc3AuYm9keSkpO1xuXG4gICAgICAgIGNvbnN0IHJlcSA9IGh0dHBNb2NrLmV4cGVjdE9uZSh7IG1ldGhvZDogJ1BPU1QnIH0pO1xuICAgICAgICByZXEuZmx1c2gocmV0dXJuZWRGcm9tU2VydmljZSk7XG4gICAgICAgIGV4cGVjdChleHBlY3RlZFJlc3VsdCkudG9NYXRjaE9iamVjdChleHBlY3RlZCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgYSBKb2JIaXN0b3J5JywgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXR1cm5lZEZyb21TZXJ2aWNlID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGFydERhdGU6IGN1cnJlbnREYXRlLmZvcm1hdChEQVRFX1RJTUVfRk9STUFUKSxcbiAgICAgICAgICAgIGVuZERhdGU6IGN1cnJlbnREYXRlLmZvcm1hdChEQVRFX1RJTUVfRk9STUFUKSxcbiAgICAgICAgICAgIGxhbmd1YWdlOiAnQkJCQkJCJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVsZW1EZWZhdWx0XG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZXhwZWN0ZWQgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogY3VycmVudERhdGUsXG4gICAgICAgICAgICBlbmREYXRlOiBjdXJyZW50RGF0ZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJldHVybmVkRnJvbVNlcnZpY2VcbiAgICAgICAgKTtcblxuICAgICAgICBzZXJ2aWNlLnVwZGF0ZShleHBlY3RlZCkuc3Vic2NyaWJlKHJlc3AgPT4gKGV4cGVjdGVkUmVzdWx0ID0gcmVzcC5ib2R5KSk7XG5cbiAgICAgICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKHsgbWV0aG9kOiAnUFVUJyB9KTtcbiAgICAgICAgcmVxLmZsdXNoKHJldHVybmVkRnJvbVNlcnZpY2UpO1xuICAgICAgICBleHBlY3QoZXhwZWN0ZWRSZXN1bHQpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWQpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgbGlzdCBvZiBKb2JIaXN0b3J5JywgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXR1cm5lZEZyb21TZXJ2aWNlID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGFydERhdGU6IGN1cnJlbnREYXRlLmZvcm1hdChEQVRFX1RJTUVfRk9STUFUKSxcbiAgICAgICAgICAgIGVuZERhdGU6IGN1cnJlbnREYXRlLmZvcm1hdChEQVRFX1RJTUVfRk9STUFUKSxcbiAgICAgICAgICAgIGxhbmd1YWdlOiAnQkJCQkJCJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVsZW1EZWZhdWx0XG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZXhwZWN0ZWQgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogY3VycmVudERhdGUsXG4gICAgICAgICAgICBlbmREYXRlOiBjdXJyZW50RGF0ZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJldHVybmVkRnJvbVNlcnZpY2VcbiAgICAgICAgKTtcblxuICAgICAgICBzZXJ2aWNlLnF1ZXJ5KCkuc3Vic2NyaWJlKHJlc3AgPT4gKGV4cGVjdGVkUmVzdWx0ID0gcmVzcC5ib2R5KSk7XG5cbiAgICAgICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKHsgbWV0aG9kOiAnR0VUJyB9KTtcbiAgICAgICAgcmVxLmZsdXNoKFtyZXR1cm5lZEZyb21TZXJ2aWNlXSk7XG4gICAgICAgIGh0dHBNb2NrLnZlcmlmeSgpO1xuICAgICAgICBleHBlY3QoZXhwZWN0ZWRSZXN1bHQpLnRvQ29udGFpbkVxdWFsKGV4cGVjdGVkKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGRlbGV0ZSBhIEpvYkhpc3RvcnknLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2UuZGVsZXRlKDEyMykuc3Vic2NyaWJlKHJlc3AgPT4gKGV4cGVjdGVkUmVzdWx0ID0gcmVzcC5vaykpO1xuXG4gICAgICAgIGNvbnN0IHJlcSA9IGh0dHBNb2NrLmV4cGVjdE9uZSh7IG1ldGhvZDogJ0RFTEVURScgfSk7XG4gICAgICAgIHJlcS5mbHVzaCh7IHN0YXR1czogMjAwIH0pO1xuICAgICAgICBleHBlY3QoZXhwZWN0ZWRSZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgaHR0cE1vY2sudmVyaWZ5KCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=